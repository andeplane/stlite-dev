{"version":3,"file":"static/js/streamlit_frontend_src_components_elements_ArrowVegaLiteChart_index_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAEA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AA8DA;AAAA;AAAA;AAAA;AAIA;AAMA;AAKA;AAKA;AAGA;AACA;AAAA;AAoBA;AACA;AACA;AACA;AACA;AACA;AAAA;AAuDA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAlHA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AASA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAEA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAwCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;;AAEA;AACA;AAUA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAEA;AAGA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAGA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AAIA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AACA;AAQA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;;AAEA;AACA;AACA;AAIA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAUA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA","sources":["/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/ArrowVegaLiteChart/ArrowVegaLiteChart.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/ArrowVegaLiteChart/CustomTheme.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/ArrowVegaLiteChart/index.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/ArrowVegaLiteChart/styled-components.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { PureComponent } from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport embed from \"vega-embed\"\nimport * as vega from \"vega\"\nimport { expressionInterpreter } from \"vega-interpreter\"\n\nimport { logMessage } from \"src/lib/log\"\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport { ensureError } from \"src/lib/ErrorHandling\"\nimport { IndexTypeName, Quiver } from \"src/lib/Quiver\"\nimport { Theme } from \"src/theme\"\n\nimport { applyStreamlitTheme, applyThemeDefaults } from \"./CustomTheme\"\nimport { StyledVegaLiteChartContainer } from \"./styled-components\"\n\nconst MagicFields = {\n  DATAFRAME_INDEX: \"(index)\",\n}\n\nconst DEFAULT_DATA_NAME = \"source\"\n\n/**\n * Fix bug where Vega Lite was vertically-cropping the x-axis in some cases.\n * For example, in e2e/scripts/add_rows.py\n */\nconst BOTTOM_PADDING = 20\n\n/** Types of dataframe-indices that are supported as x axis. */\nconst SUPPORTED_INDEX_TYPES = new Set([\n  IndexTypeName.DatetimeIndex,\n  IndexTypeName.Float64Index,\n  IndexTypeName.Int64Index,\n  IndexTypeName.RangeIndex,\n  IndexTypeName.UInt64Index,\n])\n\ninterface Props {\n  element: VegaLiteChartElement\n  theme: Theme\n  width: number\n}\n\n/** All of the data that makes up a VegaLite chart. */\nexport interface VegaLiteChartElement {\n  /**\n   * The dataframe that will be used as the chart's main data source, if\n   * specified using Vega-Lite's inline API.\n   *\n   * This is mutually exclusive with WrappedNamedDataset - if `data` is non-null,\n   * `datasets` will not be populated; if `datasets` is populated, then `data`\n   * will be null.\n   */\n  data: Quiver | null\n\n  /** The a JSON-formatted string with the Vega-Lite spec. */\n  spec: string\n\n  /**\n   * Dataframes associated with this chart using Vega-Lite's datasets API,\n   * if any.\n   */\n  datasets: WrappedNamedDataset[]\n\n  /** If True, will overwrite the chart width spec to fit to container. */\n  useContainerWidth: boolean\n\n  /** override the properties with a theme. Currently, only \"streamlit\" or None are accepted. */\n  vegaLiteTheme: string\n}\n\n/** A mapping of `ArrowNamedDataSet.proto`. */\nexport interface WrappedNamedDataset {\n  /** The dataset's optional name. */\n  name: string | null\n\n  /** True if the name field (above) was manually set. */\n  hasName: boolean\n\n  /** The data itself, wrapped in a Quiver object. */\n  data: Quiver\n}\n\nexport interface PropsWithHeight extends Props {\n  height?: number\n}\n\ninterface State {\n  error?: Error\n}\n\nexport class ArrowVegaLiteChart extends PureComponent<PropsWithHeight, State> {\n  /**\n   * The Vega view object\n   */\n  private vegaView?: vega.View\n\n  /**\n   * Finalizer for the embedded vega object. Must be called to dispose\n   * of the vegaView when it's no longer used.\n   */\n  private vegaFinalizer?: () => void\n\n  /**\n   * The default data name to add to.\n   */\n  private defaultDataName = DEFAULT_DATA_NAME\n\n  /**\n   * The html element we attach the Vega view to.\n   */\n  private element: HTMLDivElement | null = null\n\n  readonly state = {\n    error: undefined,\n  }\n\n  public async componentDidMount(): Promise<void> {\n    try {\n      await this.createView()\n    } catch (e) {\n      const error = ensureError(e)\n      this.setState({ error })\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.finalizeView()\n  }\n\n  /**\n   * Finalize the view so it can be garbage collected. This should be done\n   * when a new view is created, and when the component unmounts.\n   */\n  private finalizeView = (): any => {\n    if (this.vegaFinalizer) {\n      this.vegaFinalizer()\n    }\n    this.vegaFinalizer = undefined\n    this.vegaView = undefined\n  }\n\n  public async componentDidUpdate(prevProps: PropsWithHeight): Promise<void> {\n    const { element: prevElement, theme: prevTheme } = prevProps\n    const { element, theme } = this.props\n\n    const prevSpec = prevElement.spec\n    const { spec } = element\n\n    if (\n      !this.vegaView ||\n      prevSpec !== spec ||\n      prevTheme !== theme ||\n      prevProps.width !== this.props.width ||\n      prevProps.height !== this.props.height ||\n      prevProps.element.vegaLiteTheme !== this.props.element.vegaLiteTheme\n    ) {\n      logMessage(\"Vega spec changed.\")\n      try {\n        await this.createView()\n      } catch (e) {\n        const error = ensureError(e)\n\n        this.setState({ error })\n      }\n      return\n    }\n\n    const prevData = prevElement.data\n    const { data } = element\n\n    if (prevData || data) {\n      this.updateData(this.defaultDataName, prevData, data)\n    }\n\n    const prevDataSets = getDataSets(prevElement) || {}\n    const dataSets = getDataSets(element) || {}\n\n    for (const [name, dataset] of Object.entries(dataSets)) {\n      const datasetName = name || this.defaultDataName\n      const prevDataset = prevDataSets[datasetName]\n\n      this.updateData(datasetName, prevDataset, dataset)\n    }\n\n    // Remove all datasets that are in the previous but not the current datasets.\n    for (const name of Object.keys(prevDataSets)) {\n      if (!dataSets.hasOwnProperty(name) && name !== this.defaultDataName) {\n        this.updateData(name, null, null)\n      }\n    }\n\n    this.vegaView.resize().runAsync()\n  }\n\n  public generateSpec = (): any => {\n    const { element: el, theme } = this.props\n    const spec = JSON.parse(el.spec)\n    const { useContainerWidth } = el\n    if (el.vegaLiteTheme === \"streamlit\") {\n      spec.config = applyStreamlitTheme(spec.config, theme)\n    } else if (spec.usermeta?.embedOptions?.theme === \"streamlit\") {\n      spec.config = applyStreamlitTheme(spec.config, theme)\n      // Remove the theme from the usermeta so it doesn't get picked up by vega embed.\n      spec.usermeta.embedOptions.theme = undefined\n    } else {\n      // Apply minor theming improvements to work better with Streamlit\n      spec.config = applyThemeDefaults(spec.config, theme)\n    }\n\n    if (this.props.height) {\n      // fullscreen\n      spec.width = this.props.width\n      spec.height = this.props.height\n    } else if (useContainerWidth) {\n      spec.width = this.props.width\n    }\n\n    if (!spec.padding) {\n      spec.padding = {}\n    }\n\n    if (spec.padding.bottom == null) {\n      spec.padding.bottom = BOTTOM_PADDING\n    }\n\n    if (spec.datasets) {\n      throw new Error(\"Datasets should not be passed as part of the spec\")\n    }\n\n    return spec\n  }\n\n  /**\n   * Update the dataset in the Vega view. This method tried to minimize changes\n   * by automatically creating and applying diffs.\n   *\n   * @param name The name of the dataset.\n   * @param prevData The dataset before the update.\n   * @param data The dataset at the current state.\n   */\n  private updateData(\n    name: string,\n    prevData: Quiver | null,\n    data: Quiver | null\n  ): void {\n    if (!this.vegaView) {\n      throw new Error(\"Chart has not been drawn yet\")\n    }\n\n    if (!data || data.data.numRows === 0) {\n      const view = this.vegaView as any\n      // eslint-disable-next-line no-underscore-dangle\n      const viewHasDataWithName = view._runtime.data.hasOwnProperty(name)\n      if (viewHasDataWithName) {\n        this.vegaView.remove(name, vega.truthy)\n      }\n      return\n    }\n\n    if (!prevData || prevData.data.numRows === 0) {\n      this.vegaView.insert(name, getDataArray(data))\n      return\n    }\n\n    const { dataRows: prevNumRows, dataColumns: prevNumCols } =\n      prevData.dimensions\n    const { dataRows: numRows, dataColumns: numCols } = data.dimensions\n\n    // Check if dataframes have same \"shape\" but the new one has more rows.\n    if (\n      dataIsAnAppendOfPrev(\n        prevData,\n        prevNumRows,\n        prevNumCols,\n        data,\n        numRows,\n        numCols\n      )\n    ) {\n      if (prevNumRows < numRows) {\n        this.vegaView.insert(name, getDataArray(data, prevNumRows))\n      }\n    } else {\n      // Clean the dataset and insert from scratch.\n      const cs = vega\n        .changeset()\n        .remove(vega.truthy)\n        .insert(getDataArray(data))\n      this.vegaView.change(name, cs)\n      logMessage(\n        `Had to clear the ${name} dataset before inserting data through Vega view.`\n      )\n    }\n  }\n\n  /**\n   * Create a new Vega view and add the data.\n   */\n  private async createView(): Promise<void> {\n    logMessage(\"Creating a new Vega view.\")\n\n    if (!this.element) {\n      throw Error(\"Element missing.\")\n    }\n\n    // Finalize the previous view so it can be garbage collected.\n    this.finalizeView()\n\n    const el = this.props.element\n    const spec = this.generateSpec()\n    const options = {\n      defaultStyle: true,\n      // Adds interpreter support for Vega expressions that is compliant with CSP\n      ast: true,\n      expr: expressionInterpreter,\n    }\n\n    const { vgSpec, view, finalize } = await embed(this.element, spec, options)\n\n    this.vegaView = view\n    this.vegaFinalizer = finalize\n\n    const datasets = getDataArrays(el)\n\n    // Heuristic to determine the default dataset name.\n    const datasetNames = datasets ? Object.keys(datasets) : []\n    if (datasetNames.length === 1) {\n      const [datasetName] = datasetNames\n      this.defaultDataName = datasetName\n    } else if (datasetNames.length === 0 && vgSpec.data) {\n      this.defaultDataName = DEFAULT_DATA_NAME\n    }\n\n    const dataObj = getInlineData(el)\n    if (dataObj) {\n      view.insert(this.defaultDataName, dataObj)\n    }\n    if (datasets) {\n      for (const [name, data] of Object.entries(datasets)) {\n        view.insert(name, data)\n      }\n    }\n\n    await view.runAsync()\n\n    // Fix bug where the \"...\" menu button overlaps with charts where width is\n    // set to -1 on first load.\n    this.vegaView.resize().runAsync()\n  }\n\n  public render(): JSX.Element {\n    if (this.state.error) {\n      // eslint-disable-next-line @typescript-eslint/no-throw-literal\n      throw this.state.error\n    }\n\n    return (\n      // Create the container Vega draws inside.\n      <StyledVegaLiteChartContainer\n        data-testid=\"stArrowVegaLiteChart\"\n        ref={c => {\n          this.element = c\n        }}\n      />\n    )\n  }\n}\n\nfunction getInlineData(\n  el: VegaLiteChartElement\n): { [field: string]: any }[] | null {\n  const dataProto = el.data\n\n  if (!dataProto || dataProto.data.numRows === 0) {\n    return null\n  }\n\n  return getDataArray(dataProto)\n}\n\nfunction getDataArrays(\n  el: VegaLiteChartElement\n): { [dataset: string]: any[] } | null {\n  const datasets = getDataSets(el)\n  if (datasets == null) {\n    return null\n  }\n\n  const datasetArrays: { [dataset: string]: any[] } = {}\n\n  for (const [name, dataset] of Object.entries(datasets)) {\n    datasetArrays[name] = getDataArray(dataset)\n  }\n\n  return datasetArrays\n}\n\nfunction getDataSets(\n  el: VegaLiteChartElement\n): { [dataset: string]: Quiver } | null {\n  if (el.datasets?.length === 0) {\n    return null\n  }\n\n  const datasets: { [dataset: string]: Quiver } = {}\n\n  el.datasets.forEach((x: WrappedNamedDataset) => {\n    if (!x) {\n      return\n    }\n    const name = x.hasName ? x.name : null\n    datasets[name as string] = x.data\n  })\n\n  return datasets\n}\n\nexport function getDataArray(\n  dataProto: Quiver,\n  startIndex = 0\n): { [field: string]: any }[] {\n  if (dataProto.isEmpty()) {\n    return []\n  }\n\n  const dataArr = []\n  const { dataRows: rows, dataColumns: cols } = dataProto.dimensions\n\n  const indexType = Quiver.getTypeName(dataProto.types.index[0])\n  const hasSupportedIndex = SUPPORTED_INDEX_TYPES.has(\n    indexType as IndexTypeName\n  )\n\n  for (let rowIndex = startIndex; rowIndex < rows; rowIndex++) {\n    const row: { [field: string]: any } = {}\n\n    if (hasSupportedIndex) {\n      const indexValue = dataProto.getIndexValue(rowIndex, 0)\n      // VegaLite can't handle BigInts, so they have to be converted to Numbers first\n      row[MagicFields.DATAFRAME_INDEX] =\n        typeof indexValue === \"bigint\" ? Number(indexValue) : indexValue\n    }\n\n    for (let colIndex = 0; colIndex < cols; colIndex++) {\n      const dataValue = dataProto.getDataValue(rowIndex, colIndex)\n      row[dataProto.columns[0][colIndex]] =\n        typeof dataValue === \"bigint\" ? Number(dataValue) : dataValue\n    }\n    dataArr.push(row)\n  }\n\n  return dataArr\n}\n\n/**\n * Checks if data looks like it's just prevData plus some appended rows.\n */\nfunction dataIsAnAppendOfPrev(\n  prevData: Quiver,\n  prevNumRows: number,\n  prevNumCols: number,\n  data: Quiver,\n  numRows: number,\n  numCols: number\n): boolean {\n  // Check whether dataframes have the same shape.\n\n  // not an append\n  if (prevNumCols !== numCols) {\n    return false\n  }\n\n  // Data can be updated, but still have the same number of rows.\n  // We consider the case an append only when the number of rows has increased\n  if (prevNumRows >= numRows) {\n    return false\n  }\n\n  // if no previous data, render from scratch\n  if (prevNumRows === 0) {\n    return false\n  }\n\n  const c = numCols - 1\n  const r = prevNumRows - 1\n\n  // Check if the new dataframe looks like it's a superset of the old one.\n  // (this is a very light check, and not guaranteed to be right!)\n  if (\n    prevData.getDataValue(0, c) !== data.getDataValue(0, c) ||\n    prevData.getDataValue(r, c) !== data.getDataValue(r, c)\n  ) {\n    return false\n  }\n\n  return true\n}\n\nexport default withTheme(withFullScreenWrapper(ArrowVegaLiteChart))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { merge, mergeWith, isArray } from \"lodash\"\n\nimport {\n  getGray30,\n  getGray70,\n  hasLightBackgroundColor,\n  getCategoricalColorsArray,\n  getDivergingColorsArray,\n  getSequentialColorsArray,\n  Theme,\n} from \"src/theme\"\n\nexport function applyStreamlitTheme(config: any, theme: Theme): any {\n  // This theming config contains multiple hard coded spacing values.\n  // The reason is that we currently only have rem values in our spacing\n  // definitions and vega lite requires numerical (pixel) values.\n\n  const streamlitTheme = {\n    font: theme.genericFonts.bodyFont,\n    background: theme.colors.bgColor,\n    fieldTitle: \"verbal\",\n    autosize: { type: \"fit\", contains: \"padding\" },\n    title: {\n      align: \"left\",\n      anchor: \"start\",\n      color: theme.colors.headingColor,\n      titleFontStyle: \"normal\",\n      fontWeight: theme.fontWeights.bold,\n      fontSize: theme.fontSizes.smPx + 2,\n      orient: \"top\",\n      offset: 26,\n    },\n    axis: {\n      labelFontSize: theme.fontSizes.twoSmPx,\n      labelFontWeight: theme.fontWeights.normal,\n      labelColor: getGray70(theme),\n      labelFontStyle: \"normal\",\n      titleFontWeight: theme.fontWeights.normal,\n      titleFontSize: theme.fontSizes.smPx,\n      titleColor: getGray70(theme),\n      titleFontStyle: \"normal\",\n      ticks: false,\n      gridColor: getGray30(theme),\n      domain: false,\n      domainWidth: 1,\n      domainColor: getGray30(theme),\n      labelFlush: true,\n      labelFlushOffset: 1,\n      labelBound: false,\n      labelLimit: 100,\n      titlePadding: theme.spacing.lgPx,\n      labelPadding: theme.spacing.lgPx,\n      labelSeparation: theme.spacing.twoXSPx,\n      labelOverlap: true,\n    },\n    legend: {\n      labelFontSize: theme.fontSizes.smPx,\n      labelFontWeight: theme.fontWeights.normal,\n      labelColor: getGray70(theme),\n      titleFontSize: theme.fontSizes.smPx,\n      titleFontWeight: theme.fontWeights.normal,\n      titleFontStyle: \"normal\",\n      titleColor: getGray70(theme),\n      titlePadding: theme.spacing.mdPx,\n      labelPadding: theme.spacing.lgPx,\n      columnPadding: theme.spacing.smPx,\n      rowPadding: theme.spacing.twoXSPx,\n      padding: 7,\n      symbolStrokeWidth: 4,\n    },\n    range: {\n      category: getCategoricalColorsArray(theme),\n      diverging: getDivergingColorsArray(theme),\n      ramp: getSequentialColorsArray(theme),\n      heatmap: getSequentialColorsArray(theme),\n    },\n    view: {\n      columns: 1,\n      strokeWidth: 0,\n      stroke: \"transparent\",\n      continuousHeight: 350,\n      continuousWidth: 400,\n    },\n    concat: {\n      columns: 1,\n    },\n    facet: {\n      columns: 1,\n    },\n    mark: {\n      tooltip: true,\n      ...(hasLightBackgroundColor(theme)\n        ? { color: \"#0068C9\" }\n        : { color: \"#83C9FF\" }),\n    },\n    bar: {\n      binSpacing: theme.spacing.twoXSPx,\n      discreteBandSize: { band: 0.85 },\n    },\n    axisDiscrete: {\n      grid: false,\n    },\n    axisXPoint: {\n      grid: false,\n    },\n    axisTemporal: {\n      grid: false,\n    },\n    axisXBand: {\n      grid: false,\n    },\n  }\n\n  if (!config) {\n    return streamlitTheme\n  }\n\n  // Fill in theme defaults where the user didn't specify config options.\n  return mergeWith({}, streamlitTheme, config, (_, b) =>\n    isArray(b) ? b : undefined\n  )\n}\n\nexport function applyThemeDefaults(config: any, theme: Theme): any {\n  const { colors, fontSizes, genericFonts } = theme\n  const themeFonts = {\n    labelFont: genericFonts.bodyFont,\n    titleFont: genericFonts.bodyFont,\n    labelFontSize: fontSizes.twoSmPx,\n    titleFontSize: fontSizes.twoSmPx,\n  }\n  const themeDefaults = {\n    background: colors.bgColor,\n    axis: {\n      labelColor: colors.bodyText,\n      titleColor: colors.bodyText,\n      gridColor: getGray30(theme),\n      ...themeFonts,\n    },\n    legend: {\n      labelColor: colors.bodyText,\n      titleColor: colors.bodyText,\n      ...themeFonts,\n    },\n    title: {\n      color: colors.bodyText,\n      subtitleColor: colors.bodyText,\n      ...themeFonts,\n    },\n    header: {\n      labelColor: colors.bodyText,\n    },\n    view: {\n      continuousHeight: 350,\n      continuousWidth: 400,\n    },\n    mark: {\n      tooltip: true,\n    },\n  }\n\n  if (!config) {\n    return themeDefaults\n  }\n\n  // Fill in theme defaults where the user didn't specify config options.\n  return merge({}, themeDefaults, config)\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default } from \"./ArrowVegaLiteChart\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledVegaLiteChartContainer = styled.div(({ theme }) => ({\n  // These styles come from VegaLite Library\n  \"&.vega-embed\": {\n    \"&:hover summary, .vega-embed:focus summary\": {\n      background: \"transparent\",\n    },\n    \"&.has-actions\": {\n      paddingRight: 0,\n    },\n    \".vega-actions\": {\n      zIndex: theme.zIndices.popupMenu,\n      // Customize menu UI to look like the Streamlit menu:\n      backgroundColor: theme.colors.bgColor,\n      boxShadow: \"rgb(0 0 0 / 16%) 0px 4px 16px\",\n      border: `1px solid ${theme.colors.fadedText10}`,\n      a: {\n        fontFamily: theme.genericFonts.bodyFont,\n        fontWeight: theme.fontWeights.normal,\n        fontSize: theme.fontSizes.md,\n        margin: 0,\n        padding: `${theme.spacing.twoXS} ${theme.spacing.twoXL}`,\n        color: theme.colors.bodyText,\n      },\n      \"a:hover\": {\n        backgroundColor: theme.colors.secondaryBg,\n        color: theme.colors.bodyText,\n      },\n      \":before\": {\n        content: \"none\",\n      },\n      \":after\": {\n        content: \"none\",\n      },\n    },\n    summary: {\n      opacity: 0,\n      // Fix weird floating button height issue in Vega Lite.\n      height: \"auto\",\n      // Fix floating button appearing above pop-ups.\n      zIndex: theme.zIndices.menuButton,\n      border: \"none\",\n      boxShadow: \"none\",\n      borderRadius: theme.radii.md,\n      color: theme.colors.fadedText10,\n      backgroundColor: \"transparent\",\n      transition: \"opacity 300ms 150ms,transform 300ms 150ms\",\n      \"&:active, &:focus-visible, &:hover\": {\n        border: \"none\",\n        boxShadow: \"none\",\n        color: theme.colors.bodyText,\n        opacity: \"1 !important\",\n        background: theme.colors.darkenedBgMix25,\n      },\n    },\n  },\n}))\n"],"names":[],"sourceRoot":""}