{"version":3,"file":"static/js/streamlit_frontend_src_components_widgets_Checkbox_index_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAuBA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AA0CA;AAKA;AAAA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AA/DA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;;AA2BA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;;AAEA;AACA;;AAMA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAMA;AALA;AACA;AAIA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAEA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAMA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA","sources":["/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/Checkbox/Checkbox.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/Checkbox/index.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/Checkbox/styled-components.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/utils\"\nimport { Checkbox as UICheckbox } from \"baseui/checkbox\"\nimport { Checkbox as CheckboxProto } from \"src/autogen/proto\"\nimport { transparentize } from \"color2k\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport { Theme } from \"src/theme\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { Placement } from \"src/components/shared/Tooltip\"\nimport { StyledWidgetLabelHelpInline } from \"src/components/widgets/BaseWidget\"\nimport StreamlitMarkdown from \"src/components/shared/StreamlitMarkdown\"\n\nimport { StyledContent } from \"./styled-components\"\n\nexport interface OwnProps {\n  disabled: boolean\n  element: CheckboxProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface ThemeProps {\n  theme: Theme\n}\n\nexport type Props = OwnProps & ThemeProps\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: boolean\n}\n\nclass Checkbox extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): boolean {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getBoolValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setBoolValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const value = e.target.checked\n    this.setState({ value }, () => this.commitWidgetValue({ fromUi: true }))\n  }\n\n  public render(): React.ReactNode {\n    const { theme, width, element, disabled, widgetMgr } = this.props\n    const { colors, spacing } = theme\n    const style = { width }\n    const color = disabled ? colors.fadedText40 : colors.bodyText\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    // TODO Check the Widget usage\n    return (\n      <div className=\"row-widget stCheckbox\" style={style}>\n        <UICheckbox\n          checked={this.state.value}\n          disabled={disabled}\n          onChange={this.onChange}\n          aria-label={element.label}\n          overrides={{\n            Root: {\n              style: ({ $isFocusVisible }: { $isFocusVisible: boolean }) => ({\n                marginBottom: 0,\n                marginTop: 0,\n                paddingRight: spacing.twoThirdsSmFont,\n                backgroundColor: $isFocusVisible ? colors.darkenedBgMix25 : \"\",\n                display: \"flex\",\n                alignItems: \"start\",\n              }),\n            },\n            Checkmark: {\n              style: ({\n                $isFocusVisible,\n                $checked,\n              }: {\n                $isFocusVisible: boolean\n                $checked: boolean\n              }) => {\n                const borderColor =\n                  $checked && !disabled ? colors.primary : colors.fadedText40\n\n                return {\n                  outline: 0,\n                  width: \"1rem\",\n                  height: \"1rem\",\n                  marginTop: \"0.30rem\",\n                  boxShadow:\n                    $isFocusVisible && $checked\n                      ? `0 0 0 0.2rem ${transparentize(colors.primary, 0.5)}`\n                      : \"\",\n                  // This is painfully verbose, but baseweb seems to internally\n                  // use the long-hand version, which means we can't use the\n                  // shorthand names here as if we do we'll end up with warn\n                  // logs spamming us every time a checkbox is rendered.\n                  borderLeftWidth: \"2px\",\n                  borderRightWidth: \"2px\",\n                  borderTopWidth: \"2px\",\n                  borderBottomWidth: \"2px\",\n                  borderLeftColor: borderColor,\n                  borderRightColor: borderColor,\n                  borderTopColor: borderColor,\n                  borderBottomColor: borderColor,\n                }\n              },\n            },\n            Label: {\n              style: {\n                color,\n              },\n            },\n          }}\n        >\n          <StyledContent\n            visibility={labelVisibilityProtoValueToEnum(\n              element.labelVisibility?.value\n            )}\n          >\n            <StreamlitMarkdown\n              source={element.label}\n              allowHTML={false}\n              isLabel\n              isCheckbox\n            />\n            {element.help && (\n              <StyledWidgetLabelHelpInline color={color}>\n                <TooltipIcon\n                  content={element.help}\n                  placement={Placement.TOP_RIGHT}\n                />\n              </StyledWidgetLabelHelpInline>\n            )}\n          </StyledContent>\n        </UICheckbox>\n      </div>\n    )\n  }\n}\n\nexport default withTheme(Checkbox)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default } from \"./Checkbox\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nimport { LabelVisibilityOptions } from \"src/lib/utils\"\n\nexport interface StyledContentProps {\n  visibility?: LabelVisibilityOptions\n}\n\nexport const StyledContent = styled.div<StyledContentProps>(\n  ({ visibility }) => ({\n    display: visibility === LabelVisibilityOptions.Collapsed ? \"none\" : \"flex\",\n    visibility:\n      visibility === LabelVisibilityOptions.Hidden ? \"hidden\" : \"visible\",\n    verticalAlign: \"middle\",\n    flexDirection: \"row\",\n    alignItems: \"center\",\n  })\n)\n"],"names":[],"sourceRoot":""}