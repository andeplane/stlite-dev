{"version":3,"file":"static/js/streamlit_frontend_src_components_widgets_Radio_index_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAIA;AAEA;AAAA;AAwBA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAeA;AACA;AAAA;AAAA;AAGA;AAAA;AAjBA;AACA;AACA;AAIA;AACA;AAAA;AAAA;AACA;AACA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AAAA;AAKA;AACA;AACA;AACA;AAAA;AACA;AAGA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAIA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AApDA;AAAA;AAAA;AAAA;AAsDA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACzKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAEA;AAEA;AAAA;AAiBA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AAAA;AA0CA;AAKA;AAAA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAhEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;;AA4BA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AAMA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","sources":["/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/shared/Radio/Radio.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/shared/Radio/index.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/Radio/Radio.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/Radio/index.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { withTheme } from \"@emotion/react\"\nimport { Radio as UIRadio, RadioGroup, ALIGN } from \"baseui/radio\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelpInline,\n} from \"src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { LabelVisibilityOptions } from \"src/lib/utils\"\nimport { Placement } from \"src/components/shared/Tooltip\"\nimport { Theme } from \"src/theme\"\n\nexport interface Props {\n  disabled: boolean\n  horizontal: boolean\n  theme: Theme\n  width?: number\n  value: number\n  onChange: (selectedIndex: number) => any\n  options: any[]\n  label?: string\n  labelVisibility?: LabelVisibilityOptions\n  help?: string\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number\n}\n\nclass Radio extends React.PureComponent<Props, State> {\n  public state: State = {\n    value: this.props.value,\n  }\n\n  public componentDidUpdate(prevProps: Props): void {\n    // If props.value has changed, re-initialize state.value.\n    if (\n      prevProps.value !== this.props.value &&\n      this.props.value !== this.state.value\n    ) {\n      this.setState((_, prevProps) => {\n        return { value: prevProps.value }\n      })\n    }\n  }\n\n  private onChange = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    const selectedIndex = parseInt(e.target.value, 10)\n    this.setState({ value: selectedIndex }, () =>\n      this.props.onChange(selectedIndex)\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { theme, width, help, label, horizontal, labelVisibility } =\n      this.props\n    let { disabled } = this.props\n    const { colors, radii } = theme\n    const style = { width }\n    const options = [...this.props.options]\n\n    if (options.length === 0) {\n      options.push(\"No options to select.\")\n      disabled = true\n    }\n\n    return (\n      <div className=\"row-widget stRadio\" style={style}>\n        <WidgetLabel\n          label={label}\n          disabled={disabled}\n          labelVisibility={labelVisibility}\n        >\n          {help && (\n            <StyledWidgetLabelHelpInline>\n              <TooltipIcon content={help} placement={Placement.TOP_RIGHT} />\n            </StyledWidgetLabelHelpInline>\n          )}\n        </WidgetLabel>\n        <RadioGroup\n          onChange={this.onChange}\n          value={this.state.value.toString()}\n          disabled={disabled}\n          align={horizontal ? ALIGN.horizontal : ALIGN.vertical}\n          aria-label={label}\n        >\n          {options.map((option: string, index: number) => (\n            <UIRadio\n              key={index}\n              value={index.toString()}\n              overrides={{\n                Root: {\n                  style: ({\n                    $isFocusVisible,\n                  }: {\n                    $isFocusVisible: boolean\n                  }) => ({\n                    marginBottom: 0,\n                    marginTop: 0,\n                    marginRight: \"1rem\",\n                    // Make left and right padding look the same visually.\n                    paddingLeft: 0,\n                    alignItems: \"start\",\n                    paddingRight: \"2px\",\n                    backgroundColor: $isFocusVisible\n                      ? colors.darkenedBgMix25\n                      : \"\",\n                    borderTopLeftRadius: radii.md,\n                    borderTopRightRadius: radii.md,\n                    borderBottomLeftRadius: radii.md,\n                    borderBottomRightRadius: radii.md,\n                  }),\n                },\n                RadioMarkOuter: {\n                  style: ({ $checked }: { $checked: boolean }) => ({\n                    width: \"1rem\",\n                    height: \"1rem\",\n                    marginTop: \"0.35rem\",\n                    marginRight: \"0\",\n                    backgroundColor:\n                      $checked && !disabled\n                        ? colors.primary\n                        : colors.fadedText40,\n                  }),\n                },\n                RadioMarkInner: {\n                  style: ({ $checked }: { $checked: boolean }) => ({\n                    height: $checked ? \"6px\" : \".75rem\",\n                    width: $checked ? \"6px\" : \".75rem\",\n                  }),\n                },\n                Label: {\n                  style: {\n                    color: disabled ? colors.fadedText40 : colors.bodyText,\n                    position: \"relative\",\n                    top: \"1px\",\n                  },\n                },\n              }}\n            >\n              {option}\n            </UIRadio>\n          ))}\n        </RadioGroup>\n      </div>\n    )\n  }\n}\n\nexport default withTheme(Radio)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default } from \"./Radio\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport UIRadio from \"src/components/shared/Radio\"\nimport { Radio as RadioProto } from \"src/autogen/proto\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: RadioProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: number\n}\n\nclass Radio extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    value: this.initialValue,\n  }\n\n  get initialValue(): number {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getIntValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setIntValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onChange = (selectedIndex: number): void => {\n    this.setState({ value: selectedIndex }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  public render(): React.ReactNode {\n    const { disabled, element, width, widgetMgr } = this.props\n    const { horizontal, options, label, labelVisibility, help } = element\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <UIRadio\n        label={label}\n        onChange={this.onChange}\n        options={options}\n        width={width}\n        disabled={disabled}\n        horizontal={horizontal}\n        labelVisibility={labelVisibilityProtoValueToEnum(\n          labelVisibility?.value\n        )}\n        value={this.state.value}\n        help={help}\n      />\n    )\n  }\n}\n\nexport default Radio\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default } from \"./Radio\"\n"],"names":[],"sourceRoot":""}