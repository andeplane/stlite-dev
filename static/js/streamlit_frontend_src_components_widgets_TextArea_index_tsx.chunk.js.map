{"version":3,"file":"static/js/streamlit_frontend_src_components_widgets_TextArea_index_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAUA;AAMA;AALA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAGA;AACA;AAAA;AAEA;AAJA;AAAA;AAAA;AAAA;AAOA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AAEA;AACA;AACA;AACA;AACA;AAOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AAGA;AACA;AACA;AAIA;AACA;AACA;AACA;AAAA;AAsBA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AAAA;AA0CA;AAKA;AAAA;AAAA;AACA;AAAA;AAOA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAGA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAKA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAjHA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;;AAEA;;AA6EA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;;AAEA;AACA;AAMA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvPA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sources":["/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/shared/InputInstructions/InputInstructions.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/shared/InputInstructions/styled-components.ts","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/TextArea/TextArea.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/TextArea/index.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/TextArea/styled-components.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport { isFromMac } from \"src/lib/utils\"\nimport { StyledWidgetInstructions } from \"src/components/widgets/BaseWidget\"\nimport { StyledMessage } from \"./styled-components\"\n\nexport interface Props {\n  dirty: boolean\n  value: string\n  maxLength?: number\n  className?: string\n  type?: \"multiline\" | \"single\"\n}\n\nconst InputInstructions = ({\n  dirty,\n  value,\n  maxLength,\n  className,\n  type = \"single\",\n}: Props): ReactElement => {\n  const messages: ReactElement[] = []\n  const addMessage = (text: string, shouldBlink = false): void => {\n    messages.push(\n      <StyledMessage\n        key={messages.length}\n        includeDot={messages.length > 0}\n        shouldBlink={shouldBlink}\n      >\n        {text}\n      </StyledMessage>\n    )\n  }\n\n  if (dirty) {\n    if (type === \"multiline\") {\n      if (isFromMac()) {\n        addMessage(\"Press ⌘+Enter to apply\")\n      } else {\n        addMessage(\"Press Ctrl+Enter to apply\")\n      }\n    } else {\n      addMessage(\"Press Enter to apply\")\n    }\n  }\n\n  if (maxLength) {\n    addMessage(\n      `${value.length}/${maxLength}`,\n      dirty && value.length >= maxLength\n    )\n  }\n\n  return (\n    <StyledWidgetInstructions className={className}>\n      {messages}\n    </StyledWidgetInstructions>\n  )\n}\n\nexport default InputInstructions\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\nimport { keyframes } from \"@emotion/react\"\n\nconst blink = keyframes`\n  50% {\n    color: rgba(0, 0, 0, 0);\n  }\n`\n\nexport interface StyledMessageProps {\n  includeDot: boolean\n  shouldBlink: boolean\n}\n\nexport const StyledMessage = styled.span<StyledMessageProps>(\n  ({ includeDot, shouldBlink, theme }) => ({\n    ...(includeDot\n      ? {\n          \"&::before\": {\n            opacity: 1,\n            content: '\"•\"',\n            animation: \"none\",\n            color: theme.colors.gray,\n            margin: \"0 5px\",\n          },\n        }\n      : {}),\n    ...(shouldBlink\n      ? {\n          color: theme.colors.red,\n          animationName: `${blink}`,\n          animationDuration: \"0.5s\",\n          animationIterationCount: 5,\n        }\n      : {}),\n  })\n)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { TextArea as TextAreaProto } from \"src/autogen/proto\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\n\nimport { Textarea as UITextArea } from \"baseui/textarea\"\nimport InputInstructions from \"src/components/shared/InputInstructions/InputInstructions\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { Placement } from \"src/components/shared/Tooltip\"\nimport { isInForm, labelVisibilityProtoValueToEnum } from \"src/lib/utils\"\nimport { StyledTextAreaContainer } from \"./styled-components\"\n\nexport interface Props {\n  disabled: boolean\n  element: TextAreaProto\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * True if the user-specified state.value has not yet been synced to the WidgetStateManager.\n   */\n  dirty: boolean\n\n  /**\n   * The value specified by the user via the UI. If the user didn't touch this\n   * widget's UI, the default value is used.\n   */\n  value: string\n}\n\nclass TextArea extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    dirty: false,\n    value: this.initialValue,\n  }\n\n  get initialValue(): string {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getStringValue(this.props.element)\n    return storedValue !== undefined ? storedValue : this.props.element.default\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value } = this.props.element\n    this.props.element.setValue = false\n    this.setState({ value }, () => {\n      this.commitWidgetValue({ fromUi: false })\n    })\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setStringValue(\n      this.props.element,\n      this.state.value,\n      source\n    )\n    this.setState({ dirty: false })\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState(\n      (_, prevProps) => {\n        return { value: prevProps.element.default }\n      },\n      () => this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private onBlur = (): void => {\n    if (this.state.dirty) {\n      this.commitWidgetValue({ fromUi: true })\n    }\n  }\n\n  private onChange = (e: React.ChangeEvent<HTMLTextAreaElement>): void => {\n    const { value } = e.target\n    const { element } = this.props\n    const { maxChars } = element\n\n    if (maxChars !== 0 && value.length > maxChars) {\n      return\n    }\n\n    // If the TextArea is *not* part of a form, we mark it dirty but don't\n    // update its value in the WidgetMgr. This means that individual keypresses\n    // won't trigger a script re-run.\n    if (!isInForm(this.props.element)) {\n      this.setState({ dirty: true, value })\n      return\n    }\n\n    // If TextArea *is* part of a form, we immediately update its widgetValue\n    // on text changes. The widgetValue won't be passed to the Python\n    // script until the form is submitted, so this won't cause the script\n    // to re-run. (This also means that we won't show the \"Press Enter\n    // to Apply\" prompt because the TextArea will never be \"dirty\").\n    this.setState({ dirty: false, value }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  isEnterKeyPressed = (\n    event: React.KeyboardEvent<HTMLTextAreaElement>\n  ): boolean => {\n    const { keyCode, key } = event\n\n    // Using keyCode as well due to some different behaviors on Windows\n    // https://bugs.chromium.org/p/chromium/issues/detail?id=79407\n    return key === \"Enter\" || keyCode === 13 || keyCode === 10\n  }\n\n  private onKeyDown = (e: React.KeyboardEvent<HTMLTextAreaElement>): void => {\n    const { metaKey, ctrlKey } = e\n    const { dirty } = this.state\n\n    if (this.isEnterKeyPressed(e) && (ctrlKey || metaKey) && dirty) {\n      e.preventDefault()\n\n      this.commitWidgetValue({ fromUi: true })\n    }\n  }\n\n  public render(): React.ReactNode {\n    const { element, disabled, width, widgetMgr } = this.props\n    const { value, dirty } = this.state\n    const style = { width }\n    const { height, placeholder } = element\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div className=\"stTextArea\" style={style}>\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <StyledTextAreaContainer>\n          <UITextArea\n            data-testid=\"stTextArea\"\n            value={value}\n            placeholder={placeholder}\n            onBlur={this.onBlur}\n            onChange={this.onChange}\n            onKeyDown={this.onKeyDown}\n            aria-label={element.label}\n            disabled={disabled}\n            overrides={{\n              Input: {\n                style: {\n                  lineHeight: \"1.4\",\n                  height: height ? `${height}px` : \"\",\n                  minHeight: \"95px\",\n                  resize: \"vertical\",\n                  \"::placeholder\": {\n                    opacity: \"0.7\",\n                  },\n                  // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                  paddingRight: \"1rem\",\n                  paddingLeft: \"1rem\",\n                  paddingBottom: \"1rem\",\n                  paddingTop: \"1rem\",\n                },\n              },\n            }}\n          />\n        </StyledTextAreaContainer>\n        <InputInstructions\n          dirty={dirty}\n          value={value}\n          maxLength={element.maxChars}\n          type={\"multiline\"}\n        />\n      </div>\n    )\n  }\n}\n\nexport default TextArea\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default } from \"./TextArea\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledTextAreaContainer = styled.div({\n  div: {\n    // TODO: move this to the TextArea overwrites once Root is supported:\n    // https://github.com/uber/baseweb/issues/4264\n    borderWidth: \"1px\",\n  },\n})\n"],"names":[],"sourceRoot":""}