{"version":3,"file":"static/js/streamlit_frontend_src_components_widgets_FileUploader_index_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAIA;AAAA;AAGA;AAMA;AANA;AAAA;AAAA;AAAA;AAAA;AAAA;AAeA;AAKA;AAAA;AAJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AA3DA;AAMA;AAAA;AAuDA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAWA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACvEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAQA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AAOA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAGA;AAKA;AAEA;AAGA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AA8BA;AAGA;AACA;AACA;AACA;AACA;;AAGA;AACA;AAAA;AAVA;AAOA;AAkEA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAGA;AAAA;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAsCA;AAAA;AAAA;AACA;AAAA;AAcA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AAKA;AAKA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAKA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AAKA;AACA;AAIA;AAEA;AACA;AACA;AACA;AAAA;AAGA;AACA;AACA;AAKA;AACA;AACA;AACA;AAEA;AAEA;AAWA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAUA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAAA;AAEA;AAAA;AAMA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAUA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAMA;AACA;AAAA;AAIA;AACA;AACA;AAGA;AACA;AACA;AAAA;AAOA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;;AAEA;AACA;AAGA;AACA;AACA;AACA;AAEA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAEA;AACA;AAtZA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AAEA;AACA;AAiDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AA0QA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;AAEA;AACA;;AAMA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACviBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAsBA;;AAGA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;;AAGA;AACA;AACA;AACA;AACA;AACA;AAEA;AAKA;AAzBA;AAEA;AAEA;AAsBA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AAKA;AACA;AACA;AACA;AACA;AACA;AAQA;AAYA;AAEA;AADA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/GA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AAIA;AAQA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9KA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAWA;AAMA;AALA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACtDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAAA;AAAA;AAQA;AAGA;AAEA;AACA;AAKA;AAAA;AAJA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAIA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAGA;AAAA;AArDA;AAWA;AA2CA;AACA;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC1FA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;;AAOA;AACA;AACA;AAAA;AATA;AAAA;AAAA;AAAA;AAAA;AAUA;AACA;AAOA;AAIA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAKA;AACA;AACA;AAEA;AAKA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/shared/ProgressBar/ProgressBar.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/shared/ProgressBar/index.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/FileUploader/FileDropzone.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/FileUploader/FileDropzoneInstructions.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/FileUploader/FileUploader.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/FileUploader/UploadFileInfo.ts","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/FileUploader/UploadedFile.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/FileUploader/UploadedFiles.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/FileUploader/index.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/FileUploader/styled-components.ts","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/hocs/withPagination/Pagination.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/hocs/withPagination/index.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/hocs/withPagination/styled-components.ts","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/hocs/withPagination/withPagination.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/lib/FileHelper.ts"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport { useTheme } from \"@emotion/react\"\nimport { AppContext } from \"src/components/core/AppContext\"\nimport { Theme, isPresetTheme } from \"src/theme\"\nimport {\n  ProgressBar as UIProgressBar,\n  ProgressBarOverrides,\n} from \"baseui/progress-bar\"\nimport { mergeOverrides } from \"baseui\"\nimport { Overrides } from \"baseui/overrides\"\n\nexport enum Size {\n  EXTRASMALL = \"xs\",\n  SMALL = \"sm\",\n  MEDIUM = \"md\",\n  LARGE = \"lg\",\n  EXTRALARGE = \"xl\",\n}\n\nexport interface ProgressBarProps {\n  width?: number\n  value: number\n  overrides?: Overrides<any>\n  size?: Size\n}\n\nfunction ProgressBar({\n  value,\n  width,\n  size = Size.SMALL,\n  overrides,\n}: ProgressBarProps): ReactElement {\n  const theme: Theme = useTheme()\n  const heightMap = {\n    xs: theme.spacing.twoXS,\n    sm: theme.spacing.sm,\n    md: theme.spacing.lg,\n    lg: theme.spacing.xl,\n    xl: theme.spacing.twoXL,\n  }\n  const { activeTheme } = React.useContext(AppContext)\n  const usingCustomTheme = !isPresetTheme(activeTheme)\n  const defaultOverrides: Overrides<ProgressBarOverrides> = {\n    BarContainer: {\n      style: {\n        marginTop: theme.spacing.none,\n        marginBottom: theme.spacing.none,\n        marginRight: theme.spacing.none,\n        marginLeft: theme.spacing.none,\n      },\n    },\n    Bar: {\n      style: ({ $theme }: { $theme: any }) => ({\n        width: width ? width.toString() : undefined,\n        marginTop: theme.spacing.none,\n        marginBottom: theme.spacing.none,\n        marginRight: theme.spacing.none,\n        marginLeft: theme.spacing.none,\n        height: heightMap[size],\n        backgroundColor: $theme.colors.progressbarTrackFill,\n        borderTopLeftRadius: theme.spacing.twoXS,\n        borderTopRightRadius: theme.spacing.twoXS,\n        borderBottomLeftRadius: theme.spacing.twoXS,\n        borderBottomRightRadius: theme.spacing.twoXS,\n      }),\n    },\n    BarProgress: {\n      style: () => ({\n        backgroundColor: usingCustomTheme\n          ? theme.colors.primary\n          : theme.colors.blue70,\n        borderTopLeftRadius: theme.spacing.twoXS,\n        borderTopRightRadius: theme.spacing.twoXS,\n        borderBottomLeftRadius: theme.spacing.twoXS,\n        borderBottomRightRadius: theme.spacing.twoXS,\n      }),\n    },\n  }\n\n  return (\n    <UIProgressBar\n      value={value}\n      overrides={mergeOverrides(defaultOverrides, overrides)}\n    />\n  )\n}\n\nexport default ProgressBar\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default, Size } from \"./ProgressBar\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport Dropzone, { FileRejection } from \"react-dropzone\"\nimport Button, { Kind, Size } from \"src/components/shared/Button\"\n\nimport { StyledFileDropzoneSection } from \"./styled-components\"\nimport FileDropzoneInstructions from \"./FileDropzoneInstructions\"\n\nexport interface Props {\n  disabled: boolean\n  onDrop: (acceptedFiles: File[], rejectedFiles: FileRejection[]) => void\n  multiple: boolean\n  acceptedExtensions: string[]\n  maxSizeBytes: number\n  label: string\n}\n\nconst FileDropzone = ({\n  onDrop,\n  multiple,\n  acceptedExtensions,\n  maxSizeBytes,\n  disabled,\n  label,\n}: Props): React.ReactElement => (\n  <Dropzone\n    onDrop={onDrop}\n    multiple={multiple}\n    accept={acceptedExtensions.length ? acceptedExtensions : undefined}\n    maxSize={maxSizeBytes}\n    disabled={disabled}\n    // react-dropzone v12+ uses the File System Access API by default,\n    // causing the bug described in https://github.com/streamlit/streamlit/issues/6176.\n    useFsAccessApi={false}\n  >\n    {({ getRootProps, getInputProps }) => (\n      <StyledFileDropzoneSection\n        {...getRootProps()}\n        data-testid=\"stFileUploadDropzone\"\n        isDisabled={disabled}\n        aria-label={label}\n      >\n        <input {...getInputProps()} />\n        <FileDropzoneInstructions\n          multiple={multiple}\n          acceptedExtensions={acceptedExtensions}\n          maxSizeBytes={maxSizeBytes}\n        />\n        <Button kind={Kind.SECONDARY} disabled={disabled} size={Size.SMALL}>\n          Browse files\n        </Button>\n      </StyledFileDropzoneSection>\n    )}\n  </Dropzone>\n)\n\nexport default FileDropzone\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { CloudUpload } from \"@emotion-icons/material-outlined\"\nimport Icon from \"src/components/shared/Icon\"\nimport { FileSize, getSizeDisplay } from \"src/lib/FileHelper\"\nimport { Small } from \"src/components/shared/TextElements\"\n\nimport {\n  StyledFileDropzoneInstructions,\n  StyledFileDropzoneInstructionsFileUploaderIcon,\n  StyledFileDropzoneInstructionsStyledSpan,\n  StyledFileDropzoneInstructionsColumn,\n} from \"./styled-components\"\n\nexport interface Props {\n  multiple: boolean\n  acceptedExtensions: string[]\n  maxSizeBytes: number\n}\n\nconst FileDropzoneInstructions = ({\n  multiple,\n  acceptedExtensions,\n  maxSizeBytes,\n}: Props): React.ReactElement => (\n  <StyledFileDropzoneInstructions>\n    <StyledFileDropzoneInstructionsFileUploaderIcon>\n      <Icon content={CloudUpload} size=\"threeXL\" />\n    </StyledFileDropzoneInstructionsFileUploaderIcon>\n    <StyledFileDropzoneInstructionsColumn>\n      <StyledFileDropzoneInstructionsStyledSpan>\n        Drag and drop file{multiple ? \"s\" : \"\"} here\n      </StyledFileDropzoneInstructionsStyledSpan>\n      <Small>\n        {`Limit ${getSizeDisplay(maxSizeBytes, FileSize.Byte, 0)} per file`}\n        {acceptedExtensions.length\n          ? ` • ${acceptedExtensions\n              .join(\", \")\n              .replace(/\\./g, \"\")\n              .toUpperCase()}`\n          : null}\n      </Small>\n    </StyledFileDropzoneInstructionsColumn>\n  </StyledFileDropzoneInstructions>\n)\n\nexport default FileDropzoneInstructions\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport axios from \"axios\"\nimport _ from \"lodash\"\nimport React from \"react\"\nimport { FileRejection } from \"react-dropzone\"\n\nimport {\n  FileUploader as FileUploaderProto,\n  FileUploaderState as FileUploaderStateProto,\n  UploadedFileInfo as UploadedFileInfoProto,\n} from \"src/autogen/proto\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\n\nimport { FileSize, getSizeDisplay, sizeConverter } from \"src/lib/FileHelper\"\nimport { FileUploadClient } from \"src/lib/FileUploadClient\"\nimport { WidgetStateManager } from \"src/lib/WidgetStateManager\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/components/widgets/BaseWidget\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { Placement } from \"src/components/shared/Tooltip\"\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/utils\"\nimport FileDropzone from \"./FileDropzone\"\nimport { StyledFileUploader } from \"./styled-components\"\nimport UploadedFiles from \"./UploadedFiles\"\nimport { UploadFileInfo, UploadedStatus } from \"./UploadFileInfo\"\n\nexport interface Props {\n  disabled: boolean\n  element: FileUploaderProto\n  widgetMgr: WidgetStateManager\n  uploadClient: FileUploadClient\n  width: number\n}\n\ntype FileUploaderStatus =\n  | \"ready\" // FileUploader can upload or delete files\n  | \"updating\" // at least one file is being uploaded or deleted\n\nexport interface State {\n  /**\n   * List of files dropped on the FileUploader by the user. This list includes\n   * rejected files that will not be updated.\n   */\n  files: UploadFileInfo[]\n\n  /**\n   * The most recent file ID we've received from the server. This gets sent\n   * back to the server during widget update so that it clean up\n   * orphaned files. File IDs start at 1 and only ever increase, so a\n   * file with a higher ID is guaranteed to be newer than one with a lower ID.\n   */\n  newestServerFileId: number\n}\n\nclass FileUploader extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  /**\n   * A counter for assigning unique internal IDs to each file tracked\n   * by the uploader. These IDs are used to update file state internally,\n   * and are separate from the serverFileIds that are returned by the server.\n   */\n  private localFileIdCounter = 1\n\n  public constructor(props: Props) {\n    super(props)\n    this.state = this.initialValue\n  }\n\n  get initialValue(): State {\n    const emptyState = { files: [], newestServerFileId: 0 }\n    const { widgetMgr, element } = this.props\n\n    const widgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (widgetValue == null) {\n      return emptyState\n    }\n\n    const { maxFileId, uploadedFileInfo } = widgetValue\n    if (maxFileId == null || maxFileId === 0 || uploadedFileInfo == null) {\n      return emptyState\n    }\n\n    return {\n      files: uploadedFileInfo.map(f => {\n        const name = f.name as string\n        const size = f.size as number\n        const serverFileId = f.id as number\n\n        return new UploadFileInfo(name, size, this.nextLocalFileId(), {\n          type: \"uploaded\",\n          serverFileId,\n        })\n      }),\n      newestServerFileId: Number(maxFileId),\n    }\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  /**\n   * Return this.props.element.maxUploadSizeMb, converted to bytes.\n   */\n  private get maxUploadSizeInBytes(): number {\n    const maxMbs = this.props.element.maxUploadSizeMb\n    return sizeConverter(maxMbs, FileSize.Megabyte, FileSize.Byte)\n  }\n\n  /**\n   * Return the FileUploader's current status, which is derived from\n   * its state.\n   */\n  public get status(): FileUploaderStatus {\n    const isFileUpdating = (file: UploadFileInfo): boolean =>\n      file.status.type === \"uploading\"\n\n    // If any of our files is Uploading or Deleting, then we're currently\n    // updating.\n    if (this.state.files.some(isFileUpdating)) {\n      return \"updating\"\n    }\n\n    return \"ready\"\n  }\n\n  public componentDidUpdate = (prevProps: Props): void => {\n    const { element, widgetMgr } = this.props\n\n    // TODO(vdonato): Rework this now that there's a short window where the app\n    // may reconnect to the server without losing its uploaded files. Just\n    // removing the if statement below (to avoid resetting widget state on a\n    // disconnect) seemed to work, but I'm not entirely sure if it's a complete\n    // fix.\n    //\n    // Widgets are disabled if the app is not connected anymore.\n    // If the app disconnects from the server, a new session is created and users\n    // will lose access to the files they uploaded in their previous session.\n    // If we are reconnecting, reset the file uploader so that the widget is\n    // in sync with the new session.\n    if (prevProps.disabled !== this.props.disabled && this.props.disabled) {\n      this.reset()\n      widgetMgr.setFileUploaderStateValue(\n        element,\n        new FileUploaderStateProto(),\n        { fromUi: false }\n      )\n      return\n    }\n\n    // Maybe send a widgetValue update to the widgetStateManager.\n\n    // If our status is not \"ready\", then we have uploads in progress.\n    // We won't submit a new widgetValue until all uploads have resolved.\n    if (this.status !== \"ready\") {\n      return\n    }\n\n    // If we have had no completed uploads, our widgetValue will be\n    // undefined, and we can early-out of the state update.\n    const newWidgetValue = this.createWidgetValue()\n    if (newWidgetValue === undefined) {\n      return\n    }\n\n    const prevWidgetValue = widgetMgr.getFileUploaderStateValue(element)\n    if (!_.isEqual(newWidgetValue, prevWidgetValue)) {\n      widgetMgr.setFileUploaderStateValue(element, newWidgetValue, {\n        fromUi: true,\n      })\n    }\n  }\n\n  /**\n   * When the server receives the widget value, it deletes \"orphaned\" uploaded\n   * files. An orphaned file is any file, associated with this uploader,\n   * whose file ID is not in the file ID list, and whose\n   * ID is <= `newestServerFileId`. This logic ensures that a FileUploader\n   * within a form doesn't have any of its \"unsubmitted\" uploads prematurely\n   * deleted when the script is re-run.\n   */\n  private createWidgetValue(): FileUploaderStateProto | undefined {\n    if (this.state.newestServerFileId === 0) {\n      // If newestServerFileId is 0, we've had no transaction with the server,\n      // and therefore no widget value.\n      return undefined\n    }\n\n    const uploadedFileInfo: UploadedFileInfoProto[] = this.state.files\n      .filter(f => f.status.type === \"uploaded\")\n      .map(f => {\n        const { name, size, status } = f\n        return new UploadedFileInfoProto({\n          id: (status as UploadedStatus).serverFileId,\n          name,\n          size,\n        })\n      })\n\n    return new FileUploaderStateProto({\n      maxFileId: this.state.newestServerFileId,\n      uploadedFileInfo,\n    })\n  }\n\n  /**\n   * Clear files and errors, and reset the widget to its READY state.\n   */\n  private reset = (): void => {\n    this.setState({ files: [] })\n  }\n\n  /**\n   * Called by react-dropzone when files and drag-and-dropped onto the widget.\n   *\n   * @param acceptedFiles an array of files.\n   * @param rejectedFiles an array of FileRejections. A FileRejection\n   * encapsulates a File and an error indicating why it was rejected by\n   * the dropzone widget.\n   */\n  private dropHandler = (\n    acceptedFiles: File[],\n    rejectedFiles: FileRejection[]\n  ): void => {\n    const { element } = this.props\n    const { multipleFiles } = element\n\n    // If this is a single-file uploader and multiple files were dropped,\n    // all the files will be rejected. In this case, we pull out the first\n    // valid file into acceptedFiles, and reject the rest.\n    if (\n      !multipleFiles &&\n      acceptedFiles.length === 0 &&\n      rejectedFiles.length > 1\n    ) {\n      const firstFileIndex = rejectedFiles.findIndex(\n        file =>\n          file.errors.length === 1 && file.errors[0].code === \"too-many-files\"\n      )\n\n      if (firstFileIndex >= 0) {\n        acceptedFiles.push(rejectedFiles[firstFileIndex].file)\n        rejectedFiles.splice(firstFileIndex, 1)\n      }\n    }\n\n    // If this is a single-file uploader that already has a file,\n    // remove that file so that it can be replaced with our new one.\n    if (\n      !multipleFiles &&\n      acceptedFiles.length > 0 &&\n      this.state.files.length > 0\n    ) {\n      this.removeFile(this.state.files[0].id)\n    }\n\n    // Upload each accepted file.\n    acceptedFiles.forEach(this.uploadFile)\n\n    // Create an UploadFileInfo for each of our rejected files, and add them to\n    // our state.\n    if (rejectedFiles.length > 0) {\n      const rejectedInfos = rejectedFiles.map(rejected => {\n        const { file } = rejected\n        return new UploadFileInfo(\n          file.name,\n          file.size,\n          this.nextLocalFileId(),\n          {\n            type: \"error\",\n            errorMessage: this.getErrorMessage(\n              rejected.errors[0].code,\n              rejected.file\n            ),\n          }\n        )\n      })\n      this.addFiles(rejectedInfos)\n    }\n  }\n\n  public uploadFile = (file: File): void => {\n    // Create an UploadFileInfo for this file and add it to our state.\n    const cancelToken = axios.CancelToken.source()\n    const uploadingFileInfo = new UploadFileInfo(\n      file.name,\n      file.size,\n      this.nextLocalFileId(),\n      {\n        type: \"uploading\",\n        cancelToken,\n        progress: 1,\n      }\n    )\n    this.addFile(uploadingFileInfo)\n\n    this.props.uploadClient\n      .uploadFile(\n        this.props.element,\n        file,\n        e => this.onUploadProgress(e, uploadingFileInfo.id),\n        cancelToken.token\n      )\n      .then(newFileId =>\n        this.onUploadComplete(uploadingFileInfo.id, newFileId)\n      )\n      .catch(err => {\n        // If this was a cancel error, we don't show the user an error -\n        // the cancellation was in response to an action they took.\n        if (!axios.isCancel(err)) {\n          this.updateFile(\n            uploadingFileInfo.id,\n            uploadingFileInfo.setStatus({\n              type: \"error\",\n              errorMessage: err ? err.toString() : \"Unknown error\",\n            })\n          )\n        }\n      })\n  }\n\n  /**\n   * Called when an upload has completed. Updates the file's status, and\n   * assigns it the new file ID returned from the server.\n   */\n  private onUploadComplete = (\n    localFileId: number,\n    serverFileId: number\n  ): void => {\n    // \"state.newestServerFileId\" must always hold the max fileID\n    // returned from the server.\n    this.setState(state => ({\n      newestServerFileId: Math.max(state.newestServerFileId, serverFileId),\n    }))\n\n    const curFile = this.getFile(localFileId)\n    if (curFile == null || curFile.status.type !== \"uploading\") {\n      // The file may have been canceled right before the upload\n      // completed. In this case, we just bail.\n      return\n    }\n\n    this.updateFile(\n      curFile.id,\n      curFile.setStatus({ type: \"uploaded\", serverFileId })\n    )\n  }\n\n  /**\n   * Return a human-readable message for the given error.\n   */\n  private getErrorMessage = (errorCode: string, file: File): string => {\n    switch (errorCode) {\n      case \"file-too-large\":\n        return `File must be ${getSizeDisplay(\n          this.maxUploadSizeInBytes,\n          FileSize.Byte\n        )} or smaller.`\n      case \"file-invalid-type\":\n        return `${file.type} files are not allowed.`\n      case \"file-too-small\":\n        // This should not fire.\n        return `File size is too small.`\n      case \"too-many-files\":\n        return \"Only one file is allowed.\"\n      default:\n        return \"Unexpected error. Please try again.\"\n    }\n  }\n\n  /**\n   * Delete the file with the given ID:\n   * - Cancel the file upload if it's in progress\n   * - Remove the fileID from our local state\n   * We don't actually tell the server to delete the file. It will garbage\n   * collect it.\n   */\n  public deleteFile = (fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (file == null) {\n      return\n    }\n\n    if (file.status.type === \"uploading\") {\n      // The file hasn't been uploaded. Let's cancel the request.\n      // However, it may have been received by the server so we'll still\n      // send out a request to delete.\n      file.status.cancelToken.cancel()\n    }\n\n    this.removeFile(fileId)\n  }\n\n  /** Append the given file to `state.files`. */\n  private addFile = (file: UploadFileInfo): void => {\n    this.setState(state => ({ files: [...state.files, file] }))\n  }\n\n  /** Append the given files to `state.files`. */\n  private addFiles = (files: UploadFileInfo[]): void => {\n    this.setState(state => ({ files: [...state.files, ...files] }))\n  }\n\n  /** Remove the file with the given ID from `state.files`. */\n  private removeFile = (idToRemove: number): void => {\n    this.setState(state => ({\n      files: state.files.filter(file => file.id !== idToRemove),\n    }))\n  }\n\n  /**\n   * Return the file with the given ID, if one exists.\n   */\n  private getFile = (fileId: number): UploadFileInfo | undefined => {\n    return this.state.files.find(file => file.id === fileId)\n  }\n\n  /** Replace the file with the given id in `state.files`. */\n  private updateFile = (curFileId: number, newFile: UploadFileInfo): void => {\n    this.setState(curState => {\n      return {\n        files: curState.files.map(file =>\n          file.id === curFileId ? newFile : file\n        ),\n      }\n    })\n  }\n\n  /**\n   * Callback for file upload progress. Updates a single file's local `progress`\n   * state.\n   */\n  private onUploadProgress = (event: ProgressEvent, fileId: number): void => {\n    const file = this.getFile(fileId)\n    if (file == null || file.status.type !== \"uploading\") {\n      return\n    }\n\n    const newProgress = Math.round((event.loaded * 100) / event.total)\n    if (file.status.progress === newProgress) {\n      return\n    }\n\n    // Update file.progress\n    this.updateFile(\n      fileId,\n      file.setStatus({\n        type: \"uploading\",\n        cancelToken: file.status.cancelToken,\n        progress: newProgress,\n      })\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    this.setState({ files: [] }, () => {\n      const newWidgetValue = this.createWidgetValue()\n      if (newWidgetValue == null) {\n        return\n      }\n\n      this.props.widgetMgr.setFileUploaderStateValue(\n        this.props.element,\n        newWidgetValue,\n        { fromUi: true }\n      )\n    })\n  }\n\n  public render(): React.ReactNode {\n    const { files } = this.state\n    const { element, disabled, widgetMgr } = this.props\n    const acceptedExtensions = element.type\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    // We display files in the reverse order they were added.\n    // This way, if you have multiple pages of uploaded files and then drop\n    // another one, you'll see that newest file at the top of the first page.\n    const newestToOldestFiles = files.slice().reverse()\n\n    return (\n      <StyledFileUploader data-testid=\"stFileUploader\">\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <FileDropzone\n          onDrop={this.dropHandler}\n          multiple={element.multipleFiles}\n          acceptedExtensions={acceptedExtensions}\n          maxSizeBytes={this.maxUploadSizeInBytes}\n          label={element.label}\n          disabled={disabled}\n        />\n        {newestToOldestFiles.length > 0 && (\n          <UploadedFiles\n            items={newestToOldestFiles}\n            pageSize={3}\n            onDelete={this.deleteFile}\n            resetOnAdd\n          />\n        )}\n      </StyledFileUploader>\n    )\n  }\n\n  private nextLocalFileId(): number {\n    return this.localFileIdCounter++\n  }\n}\n\nexport default FileUploader\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CancelTokenSource } from \"axios\"\n\nexport interface UploadingStatus {\n  type: \"uploading\"\n  cancelToken: CancelTokenSource\n  progress: number\n}\n\nexport interface UploadedStatus {\n  type: \"uploaded\"\n\n  /** ID generated by the server. */\n  serverFileId: number\n}\n\nexport interface ErrorStatus {\n  type: \"error\"\n  errorMessage: string\n}\n\n/** The various statuses that an UploadedFileInfo can have. */\nexport type FileStatus = UploadingStatus | UploadedStatus | ErrorStatus\n\n/**\n * Wraps a File object with additional data used by FileUploader.\n * This class is immutable because it's used in within FileUploader.state.\n */\nexport class UploadFileInfo {\n  public readonly name: string\n\n  public readonly size: number\n\n  public readonly status: FileStatus\n\n  /**\n   * ID used to refer to the file locally, for update operations.\n   * If the file is uploaded, it will also have a serverID, which is\n   * used to refer to the file on the server.\n   */\n  public readonly id: number\n\n  /**\n   * Create a clone of this UploadFileInfo with the given status.\n   */\n  public setStatus(status: FileStatus): UploadFileInfo {\n    return new UploadFileInfo(this.name, this.size, this.id, status)\n  }\n\n  public constructor(\n    name: string,\n    size: number,\n    id: number,\n    status: FileStatus\n  ) {\n    this.name = name\n    this.size = size\n    this.id = id\n    this.status = status\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport {\n  Clear,\n  Error,\n  InsertDriveFile,\n} from \"@emotion-icons/material-outlined\"\nimport Button, { Kind } from \"src/components/shared/Button\"\nimport Icon from \"src/components/shared/Icon\"\nimport ProgressBar, { Size } from \"src/components/shared/ProgressBar\"\nimport { Small } from \"src/components/shared/TextElements\"\nimport { FileSize, getSizeDisplay } from \"src/lib/FileHelper\"\nimport {\n  StyledUploadedFile,\n  StyledFileErrorIcon,\n  StyledErrorMessage,\n  StyledFileError,\n  StyledFileIcon,\n  StyledUploadedFileData,\n  StyledUploadedFileName,\n} from \"./styled-components\"\nimport { UploadFileInfo } from \"./UploadFileInfo\"\n\nexport interface Props {\n  fileInfo: UploadFileInfo\n  onDelete: (id: number) => void\n}\n\nexport interface UploadedFileStatusProps {\n  fileInfo: UploadFileInfo\n}\n\nexport const UploadedFileStatus = ({\n  fileInfo,\n}: UploadedFileStatusProps): React.ReactElement | null => {\n  if (fileInfo.status.type === \"uploading\") {\n    return (\n      <ProgressBar\n        value={fileInfo.status.progress}\n        size={Size.SMALL}\n        overrides={{\n          Bar: {\n            style: {\n              marginLeft: 0,\n              marginTop: \"4px\",\n            },\n          },\n        }}\n      />\n    )\n  }\n\n  if (fileInfo.status.type === \"error\") {\n    return (\n      <StyledFileError>\n        <StyledErrorMessage data-testid=\"stUploadedFileErrorMessage\">\n          {fileInfo.status.errorMessage}\n        </StyledErrorMessage>\n        <StyledFileErrorIcon>\n          <Icon content={Error} size=\"lg\" />\n        </StyledFileErrorIcon>\n      </StyledFileError>\n    )\n  }\n\n  if (fileInfo.status.type === \"uploaded\") {\n    return <Small>{getSizeDisplay(fileInfo.size, FileSize.Byte)}</Small>\n  }\n\n  return null\n}\n\nconst UploadedFile = ({ fileInfo, onDelete }: Props): React.ReactElement => {\n  return (\n    <StyledUploadedFile className=\"uploadedFile\">\n      <StyledFileIcon>\n        <Icon content={InsertDriveFile} size=\"twoXL\" />\n      </StyledFileIcon>\n      <StyledUploadedFileData className=\"uploadedFileData\">\n        <StyledUploadedFileName\n          className=\"uploadedFileName\"\n          title={fileInfo.name}\n        >\n          {fileInfo.name}\n        </StyledUploadedFileName>\n        <UploadedFileStatus fileInfo={fileInfo} />\n      </StyledUploadedFileData>\n      <div data-testid=\"fileDeleteBtn\">\n        <Button onClick={() => onDelete(fileInfo.id)} kind={Kind.MINIMAL}>\n          <Icon content={Clear} size=\"lg\" />\n        </Button>\n      </div>\n    </StyledUploadedFile>\n  )\n}\n\nexport default UploadedFile\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\n\nimport withPagination, { PaginationProps } from \"src/hocs/withPagination\"\nimport UploadedFile from \"./UploadedFile\"\nimport {\n  StyledUploadedFiles,\n  StyledUploadedFilesList,\n  StyledUploadedFilesListItem,\n} from \"./styled-components\"\nimport { UploadFileInfo } from \"./UploadFileInfo\"\n\nexport interface Props {\n  items: UploadFileInfo[]\n  onDelete: (id: number) => void\n}\n\nconst UploadedFileList = ({ items, onDelete }: Props): ReactElement => {\n  return (\n    <StyledUploadedFilesList>\n      {items.map(file => (\n        <StyledUploadedFilesListItem key={file.id}>\n          <UploadedFile fileInfo={file} onDelete={onDelete} />\n        </StyledUploadedFilesListItem>\n      ))}\n    </StyledUploadedFilesList>\n  )\n}\n\nexport const PaginatedFiles = withPagination(UploadedFileList)\n\nconst UploadedFiles = (props: Props & PaginationProps): ReactElement => (\n  <StyledUploadedFiles>\n    <PaginatedFiles {...props} />\n  </StyledUploadedFiles>\n)\nexport default UploadedFiles\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default } from \"./FileUploader\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled, { CSSObject } from \"@emotion/styled\"\nimport { Theme } from \"src/theme\"\n\nexport interface StyledFileDropzone {\n  isDisabled: boolean\n}\n\nexport const StyledFileDropzoneSection = styled.section<StyledFileDropzone>(\n  ({ isDisabled, theme }) => ({\n    display: \"flex\",\n    alignItems: \"center\",\n    padding: theme.spacing.lg,\n    backgroundColor: theme.colors.secondaryBg,\n    borderRadius: theme.radii.md,\n    \":focus\": {\n      outline: \"none\",\n      boxShadow: `0 0 0 1px ${theme.colors.primary}`,\n    },\n    color: isDisabled ? theme.colors.gray : theme.colors.bodyText,\n  })\n)\n\nexport const StyledFileDropzoneInstructions = styled.div(() => ({\n  marginRight: \"auto\",\n  alignItems: \"center\",\n  display: \"flex\",\n}))\n\nexport const StyledFileDropzoneInstructionsFileUploaderIcon = styled.span(\n  ({ theme }) => ({\n    color: theme.colors.darkenedBgMix100,\n    marginRight: theme.spacing.lg,\n  })\n)\n\nexport const StyledFileDropzoneInstructionsStyledSpan = styled.span(\n  ({ theme }) => ({\n    marginBottom: theme.spacing.twoXS,\n  })\n)\n\nexport const StyledFileDropzoneInstructionsColumn = styled.div({\n  display: \"flex\",\n  flexDirection: \"column\",\n})\n\nexport const StyledUploadedFiles = styled.div(({ theme }) => ({\n  left: 0,\n  right: 0,\n  lineHeight: theme.lineHeights.tight,\n  paddingTop: theme.spacing.md,\n  paddingLeft: theme.spacing.lg,\n  paddingRight: theme.spacing.lg,\n}))\n\nexport const StyledUploadedFilesList = styled.ul(() => ({\n  listStyleType: \"none\",\n  marginBottom: 0,\n}))\n\nexport const StyledUploadedFilesListItem = styled.li(({ theme }) => ({\n  margin: theme.spacing.none,\n  padding: theme.spacing.none,\n}))\n\nexport const StyledUploadedFileData = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"baseline\",\n  flex: 1,\n  paddingLeft: theme.spacing.lg,\n  overflow: \"hidden\",\n}))\n\nexport const StyledUploadedFileName = styled.div(({ theme }) => ({\n  marginRight: theme.spacing.sm,\n  marginBottom: theme.spacing.twoXS,\n  overflow: \"hidden\",\n  textOverflow: \"ellipsis\",\n  whiteSpace: \"nowrap\",\n}))\n\nexport const StyledUploadedFile = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  marginBottom: theme.spacing.twoXS,\n}))\n\nexport const StyledErrorMessage = styled.span(({ theme }) => ({\n  marginRight: theme.spacing.twoXS,\n}))\n\nexport const StyledFileIcon = styled.div(({ theme }) => ({\n  display: \"flex\",\n  padding: theme.spacing.twoXS,\n  color: theme.colors.darkenedBgMix100,\n}))\n\nexport const StyledFileError = styled.small(({ theme }) => ({\n  color: theme.colors.danger,\n  fontSize: theme.fontSizes.sm,\n  height: theme.fontSizes.sm,\n  lineHeight: theme.fontSizes.sm,\n  display: \"flex\",\n  alignItems: \"center\",\n  whiteSpace: \"nowrap\",\n}))\n\nexport const StyledFileErrorIcon = styled.span({})\n\nconst compactFileUploader = (theme: Theme): CSSObject => ({\n  [StyledFileDropzoneSection as any]: {\n    display: \"flex\",\n    flexDirection: \"column\",\n    alignItems: \"flex-start\",\n  },\n  [StyledFileDropzoneInstructions as any]: {\n    marginBottom: theme.spacing.lg,\n  },\n  [StyledFileDropzoneInstructionsFileUploaderIcon as any]: {\n    display: \"none\",\n  },\n  [StyledUploadedFiles as any]: {\n    paddingRight: theme.spacing.lg,\n  },\n  [StyledUploadedFile as any]: {\n    maxWidth: \"inherit\",\n    flex: 1,\n    alignItems: \"flex-start\",\n    marginBottom: theme.spacing.sm,\n  },\n  [StyledUploadedFileName as any]: {\n    width: theme.sizes.full,\n  },\n  [StyledUploadedFileData as any]: {\n    flexDirection: \"column\",\n  },\n  [StyledFileError as any]: {\n    height: \"auto\",\n    whiteSpace: \"initial\",\n  },\n  [StyledFileErrorIcon as any]: {\n    display: \"none\",\n  },\n  [StyledUploadedFilesListItem as any]: {\n    margin: theme.spacing.none,\n    padding: theme.spacing.none,\n  },\n})\n\nexport const StyledFileUploader = styled.div(({ theme }) => {\n  if (theme.inSidebar) {\n    return compactFileUploader(theme)\n  }\n\n  return {\n    [`@media (max-width: ${theme.breakpoints.sm})`]:\n      compactFileUploader(theme),\n  }\n})\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"@emotion-icons/material-outlined\"\nimport Button, { Kind } from \"src/components/shared/Button\"\nimport Icon from \"src/components/shared/Icon\"\nimport { Small } from \"src/components/shared/TextElements\"\nimport { StyledPagination, StyledPaginators } from \"./styled-components\"\n\nexport interface Props {\n  className: string\n  currentPage: number\n  totalPages: number\n  pageSize: number\n  onNext: (event: React.SyntheticEvent<HTMLElement>) => void\n  onPrevious: (event: React.SyntheticEvent<HTMLElement>) => void\n}\n\nconst Pagination = ({\n  className,\n  currentPage,\n  totalPages,\n  onNext,\n  onPrevious,\n}: Props): React.ReactElement => {\n  return (\n    <StyledPagination className={className}>\n      <Small>{`Showing page ${currentPage} of ${totalPages}`}</Small>\n      <StyledPaginators>\n        <Button onClick={onPrevious} kind={Kind.MINIMAL}>\n          <Icon content={ChevronLeft} size=\"xl\" />\n        </Button>\n        <Button onClick={onNext} kind={Kind.MINIMAL}>\n          <Icon content={ChevronRight} size=\"xl\" />\n        </Button>\n      </StyledPaginators>\n    </StyledPagination>\n  )\n}\n\nexport default Pagination\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Props } from \"./withPagination\"\n\nexport { default } from \"./withPagination\"\nexport type PaginationProps = Props\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledPagination = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"space-between\",\n  paddingBottom: theme.spacing.twoXS,\n  marginBottom: theme.spacing.twoXS,\n}))\n\nexport const StyledPaginators = styled.div(({ theme }) => ({\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"center\",\n  color: theme.colors.fadedText40,\n}))\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, ReactElement, useEffect, useState } from \"react\"\nimport hoistNonReactStatics from \"hoist-non-react-statics\"\nimport Pagination from \"src/hocs/withPagination/Pagination\"\nimport { usePrevious } from \"src/lib/Hooks\"\n\nexport interface Props {\n  items: any[]\n  pageSize: number\n  resetOnAdd: boolean\n}\n\nconst calculateNumPages = (items: any[], pageSize: number): number =>\n  Math.ceil(items.length / pageSize)\n\nconst withPagination = (\n  WrappedComponent: ComponentType<any>\n): ComponentType<any> => {\n  const WithPagination = ({\n    pageSize,\n    items,\n    resetOnAdd,\n    ...props\n  }: Props): ReactElement => {\n    const [currentPage, updateCurrentPage] = useState<number>(0)\n    const [totalPages, updateTotalPages] = useState<number>(\n      calculateNumPages(items, pageSize)\n    )\n\n    const prevItems: any[] = usePrevious(items)\n\n    useEffect(() => {\n      if (prevItems && prevItems.length !== items.length) {\n        updateTotalPages(calculateNumPages(items, pageSize))\n      }\n      if (prevItems && prevItems.length < items.length) {\n        if (resetOnAdd) {\n          updateCurrentPage(0)\n        }\n      } else if (currentPage + 1 >= totalPages) {\n        updateCurrentPage(totalPages - 1)\n      }\n    }, [items, currentPage, pageSize, prevItems, resetOnAdd, totalPages])\n\n    const onNext = (): void => {\n      updateCurrentPage(Math.min(currentPage + 1, totalPages - 1))\n    }\n\n    const onPrevious = (): void => {\n      updateCurrentPage(Math.max(0, currentPage - 1))\n    }\n\n    const paginatedItems = items.slice(\n      currentPage * pageSize,\n      currentPage * pageSize + pageSize\n    )\n    return (\n      <>\n        <WrappedComponent items={paginatedItems} {...props} />\n        {items.length > pageSize ? (\n          <Pagination\n            className=\"streamlit-paginator\"\n            pageSize={pageSize}\n            totalPages={totalPages}\n            currentPage={currentPage + 1}\n            onNext={onNext}\n            onPrevious={onPrevious}\n          />\n        ) : null}\n      </>\n    )\n  }\n  return hoistNonReactStatics(WithPagination, WrappedComponent)\n}\n\nexport default withPagination\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { isFromWindows } from \"src/lib/utils\"\n\nexport enum FileSize {\n  Gigabyte = \"gb\",\n  Megabyte = \"mb\",\n  Kilobyte = \"kb\",\n  Byte = \"b\",\n}\n\n// There is a shift towards displaying storage in base 10 vs base 2\n// but Windows is still displaying things in base 2. This does not handle\n// all cases but for simplicity general rule is to use base 2 for Windows.\nexport const BYTE_CONVERSION_SIZE = isFromWindows() ? 1024 : 1000\nconst sizeUnitSequence = [\n  FileSize.Gigabyte,\n  FileSize.Megabyte,\n  FileSize.Kilobyte,\n  FileSize.Byte,\n]\n\nexport const getSizeDisplay = (\n  size: number,\n  unit: FileSize,\n  rounding = 1\n): string => {\n  if (!unit) {\n    unit = FileSize.Byte\n  }\n\n  if (rounding < 0) {\n    rounding = 0\n  }\n\n  if (size < 0) {\n    throw new Error(\"Size must be greater than or equal to 0\")\n  }\n\n  const sizeIndex = sizeUnitSequence.indexOf(unit)\n  const nextUnitSize = size / BYTE_CONVERSION_SIZE\n  if (sizeIndex && size > BYTE_CONVERSION_SIZE / 2) {\n    return getSizeDisplay(\n      nextUnitSize,\n      sizeUnitSequence[sizeIndex - 1],\n      rounding\n    )\n  }\n  return `${size.toFixed(rounding)}${unit.toUpperCase()}`\n}\n\nexport const sizeConverter = (\n  size: number,\n  inputUnit: FileSize,\n  outputUnit: FileSize\n): number => {\n  if (size < 0) {\n    throw Error(\"Size must be 0 or greater\")\n  }\n\n  const inputLevel = sizeUnitSequence.findIndex(unit => unit === inputUnit)\n  const outputLevel = sizeUnitSequence.findIndex(unit => unit === outputUnit)\n\n  if (inputLevel === -1 || outputLevel === -1) {\n    // Should not ever occur\n    throw Error(\"Unexpected byte unit provided\")\n  }\n\n  if (inputLevel === outputLevel) {\n    return size\n  }\n\n  const levelsBetween = Math.abs(inputLevel - outputLevel)\n  const byteDifference = BYTE_CONVERSION_SIZE ** levelsBetween\n\n  if (inputLevel > outputLevel) {\n    // Going from smaller to bigger\n    return size / byteDifference\n  }\n  // Going from bigger to smaller\n  return size * byteDifference\n}\n"],"names":[],"sourceRoot":""}