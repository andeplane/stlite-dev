{"version":3,"file":"static/js/streamlit_frontend_src_components_elements_DataFrame_index_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAEA;AACA;AACA;AAKA;AACA;AAKA;AAOA;AAAA;AAQA;AACA;AACA;AACA;AAIA;AAAA;AAHA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAGA;AACA;AAKA;AAJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AARA;AAAA;AAAA;AAAA;AAWA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAKA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAhNA;AAkNA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACnQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAAA;AA6CA;AASA;AARA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAMA;;AAEA;AACA;AAGA;AAAA;AACA;AACA;AAEA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AACA;AAAA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC3IA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAKA;AACA;AACA;AAGA;AACA;;AAOA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AA2CA;;AAEA;AACA;AACA;AACA;AAMA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AASA;AAAA;AAAA;AAAA;AAAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAMA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;;AAMA;AACA;;AAEA;AACA;;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;AACA;AACA;;AAIA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAIA;AACA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC7UA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AAGA;AAHA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACOA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAUA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC9IA;;AAEA;AACA;;AAEA;AAMA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;ACtBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sources":["/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/DataFrame/DataFrame.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/DataFrame/DataFrameCell.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/DataFrame/DataFrameUtil.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/DataFrame/SortDirection.ts","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/DataFrame/index.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/DataFrame/styled-components.ts","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/vendor/dom-helpers.ts","/home/runner/work/stlite-dev/stlite-dev/node_modules/@emotion-icons/open-iconic/ChevronBottom/ChevronBottom.esm.js","/home/runner/work/stlite-dev/stlite-dev/node_modules/@emotion-icons/open-iconic/ChevronTop/ChevronTop.esm.js"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement, useEffect, useState } from \"react\"\nimport { Map as ImmutableMap } from \"immutable\"\nimport { MultiGrid } from \"react-virtualized\"\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport {\n  dataFrameGetDimensions,\n  getSortedDataRowIndices,\n  tableGetRowsAndCols,\n} from \"src/lib/dataFrameProto\"\nimport { SortDirection } from \"./SortDirection\"\nimport {\n  StyledDataFrameContainer,\n  StyledEmptyDataframe,\n  StyledFixup,\n} from \"./styled-components\"\nimport {\n  CellContentsGetter,\n  CellRenderer,\n  CellRendererInput,\n  getCellContentsGetter,\n  getDimensions,\n} from \"./DataFrameUtil\"\nimport DataFrameCell from \"./DataFrameCell\"\n\nexport interface DataFrameProps {\n  width: number\n  height?: number\n  element: ImmutableMap<string, any>\n}\n\n/**\n * Functional element representing a DataFrame.\n */\nexport function DataFrame({\n  element,\n  height: propHeight,\n  width,\n}: DataFrameProps): ReactElement {\n  const multiGridRef = React.useRef<MultiGrid>(null)\n\n  /**\n   * If true, then the user manually clicked on a column header to sort the\n   * table.\n   */\n  const [sortedByUser, setSortedByUser] = useState(false)\n\n  /**\n   * Index of the column on which the table is sorted.\n   * (Column 0 = row indices).\n   */\n  const [sortColumn, setSortColumn] = useState(0)\n\n  /** Sort direction for table sorting. */\n  const [sortDirection, setSortDirection] = useState(SortDirection.ASCENDING)\n\n  // Calculate the dimensions of this array.\n  const [, nCols] = tableGetRowsAndCols(element.get(\"data\"))\n  const { headerRows, headerCols, dataRows, cols, rows } =\n    dataFrameGetDimensions(element)\n\n  /**\n   * Called when one of our column headers is clicked.\n   * Changes the sort order of the table.\n   */\n  const toggleSortOrder = (columnIndex: number): void => {\n    let newSortDirection = SortDirection.ASCENDING\n    if (sortColumn === columnIndex) {\n      // Clicking the same header toggles between ascending and descending.\n      newSortDirection =\n        sortDirection === SortDirection.ASCENDING\n          ? SortDirection.DESCENDING\n          : SortDirection.ASCENDING\n    }\n    setSortColumn(columnIndex)\n    setSortDirection(newSortDirection)\n    setSortedByUser(true)\n  }\n\n  /**\n   * Returns a function that creates a DataFrameCell component for the given cell.\n   */\n  function getCellRenderer(\n    cellContentsGetter: CellContentsGetter\n  ): CellRenderer {\n    // eslint-disable-next-line react/display-name\n    return ({\n      columnIndex,\n      key,\n      rowIndex,\n      style: baseStyle,\n    }: CellRendererInput): ReactElement => {\n      const {\n        Component,\n        styles: additionalStyles,\n        contents,\n      } = cellContentsGetter(columnIndex, rowIndex)\n\n      const headerClickedCallback =\n        rowIndex === 0 ? toggleSortOrder : undefined\n\n      const columnSortDirection =\n        columnIndex === sortColumn ? sortDirection : undefined\n\n      const isLastRow = rowIndex === dataRows\n      const isLastCol = columnIndex === cols - headerCols\n\n      // Merge our base styles with any additional cell-specific\n      // styles returned by the cellContentsGetter\n      const styles = {\n        ...baseStyle,\n        ...additionalStyles,\n        borderBottom: isLastRow ? \"none\" : undefined,\n        borderRight: isLastCol ? \"none\" : undefined,\n      }\n\n      return (\n        <DataFrameCell\n          key={key}\n          CellType={Component}\n          columnIndex={columnIndex}\n          rowIndex={rowIndex}\n          style={styles}\n          contents={contents}\n          sortedByUser={sortedByUser}\n          columnSortDirection={columnSortDirection}\n          headerClickedCallback={headerClickedCallback}\n        />\n      )\n    }\n  }\n\n  /**\n   * Returns the row indices, in display order, for this DataFrame,\n   * given its sortColumn and sortDirection.\n   */\n  const getDataRowIndices = (nCols: number): number[] => {\n    const { headerCols, dataRows } = dataFrameGetDimensions(element)\n\n    const sortAscending = sortDirection !== SortDirection.DESCENDING\n\n    // If we're sorting a header column, our sorted row indices are just the\n    // row indices themselves (reversed, if SortDirection == DESCENDING)\n    if (sortColumn < headerCols || sortColumn - headerCols >= nCols) {\n      const rowIndices = new Array(dataRows)\n      for (let i = 0; i < dataRows; i += 1) {\n        rowIndices[i] = sortAscending ? i : dataRows - (i + 1)\n      }\n\n      return rowIndices\n    }\n\n    return getSortedDataRowIndices(\n      element,\n      sortColumn - headerCols,\n      sortAscending\n    )\n  }\n\n  /**\n   * Schedule a gridSize recompute if we have a multigrid attached.\n   * This should be called whenever our data may have changed (i.e., from the render() method).\n   */\n  const recomputeSizeIfNeeded = (): void => {\n    setTimeout(() => {\n      if (multiGridRef.current != null) {\n        multiGridRef.current.recomputeGridSize()\n      }\n    }, 0)\n  }\n\n  const sortedDataRowIndices = getDataRowIndices(nCols)\n\n  // Get the cell renderer.\n  const cellContentsGetter = getCellContentsGetter({\n    element,\n    headerRows,\n    sortedDataRowIndices,\n  })\n  const cellRenderer = getCellRenderer(cellContentsGetter)\n\n  // Determine our rendering dimensions\n  const {\n    rowHeight,\n    headerHeight,\n    border,\n    height,\n    elementWidth,\n    columnWidth,\n    headerWidth,\n  } = getDimensions(propHeight, width, element, cellContentsGetter)\n\n  // Since this is a PureComponent, finding ourselves in this method\n  // means that the props have changed, so we should force a rerender of the\n  // widths.\n  recomputeSizeIfNeeded()\n\n  useEffect(() => {\n    if (sortColumn - headerCols >= nCols) {\n      setSortColumn(0)\n      setSortDirection(SortDirection.ASCENDING)\n      setSortedByUser(false)\n    }\n  }, [sortColumn, headerCols, nCols])\n\n  // Put it all together.\n  return (\n    <StyledDataFrameContainer width={elementWidth} className=\"stDataFrame\">\n      <MultiGrid\n        cellRenderer={cellRenderer}\n        fixedColumnCount={headerCols}\n        fixedRowCount={headerRows}\n        columnWidth={columnWidth}\n        columnCount={cols}\n        enableFixedColumnScroll={false}\n        enableFixedRowScroll={false}\n        height={height}\n        rowHeight={rowHeight}\n        rowCount={rows}\n        width={elementWidth}\n        classNameBottomLeftGrid=\"table-bottom-left\"\n        classNameBottomRightGrid=\"table-bottom-right\"\n        classNameTopRightGrid=\"table-top-right\"\n        ref={multiGridRef}\n      />\n      <StyledFixup\n        verticalLocator=\"top\"\n        horizontalLocator=\"right\"\n        width={border}\n        height={headerHeight}\n      />\n      <StyledFixup\n        verticalLocator=\"bottom\"\n        horizontalLocator=\"left\"\n        width={headerWidth}\n        height={border}\n      />\n      {dataRows === 0 ? (\n        <StyledEmptyDataframe>empty</StyledEmptyDataframe>\n      ) : null}\n    </StyledDataFrameContainer>\n  )\n}\n\nexport default withFullScreenWrapper(DataFrame)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ComponentType, ReactElement } from \"react\"\nimport { ChevronTop, ChevronBottom } from \"@emotion-icons/open-iconic\"\nimport Icon from \"src/components/shared/Icon\"\nimport { SortDirection } from \"./SortDirection\"\nimport { StyledSortIcon } from \"./styled-components\"\n\nexport interface DataFrameCellProps {\n  /** The cell's column index in the DataFrame */\n  columnIndex: number\n\n  /** The cell's row index in the DataFrame */\n  rowIndex: number\n\n  /** The cell's component to render */\n  CellType: ComponentType\n\n  /** Additional css styling for the cell */\n  style: Record<string, unknown>\n\n  /**\n   * The HTML contents of the cell. Added to the DOM as a child of this\n   * DataFrameCel.\n   */\n  contents: string\n\n  /**\n   * If true, then the table's sorting was manually set by the user, by\n   * clicking on a column header. We only show the sort arrow when this is\n   * true.\n   */\n  sortedByUser: boolean\n\n  /**\n   * The {@link SortDirection} for this column, or undefined if the column is\n   * unsorted. No sorting is done here - this property is used to determine\n   * which, if any, sort icon to draw in column-header cells.\n   */\n  columnSortDirection?: SortDirection\n\n  /**\n   * An optional callback that will be called when a column header is clicked.\n   * (The property is ignored for non-header cells). The callback will be passed this\n   * cell's columnIndex.\n   *\n   * {@link DataFrame} uses this to toggle column sorting.\n   */\n  headerClickedCallback?: (columnIndex: number) => void\n}\n\nexport default function DataFrameCell({\n  CellType,\n  columnIndex,\n  contents,\n  rowIndex,\n  sortedByUser,\n  style,\n  columnSortDirection,\n  headerClickedCallback,\n}: DataFrameCellProps): ReactElement {\n  let onClick\n  let role\n  let tabIndex\n  let title = contents\n\n  const isDescending = columnSortDirection === SortDirection.DESCENDING\n\n  if (headerClickedCallback != null && rowIndex === 0) {\n    onClick = () => headerClickedCallback(columnIndex)\n    role = \"button\"\n    tabIndex = 0\n    title =\n      columnSortDirection == null\n        ? `Sort by column \"${contents}\"`\n        : `Sorted by column \"${contents}\" (${\n            isDescending ? \"descending\" : \"ascending\"\n          })`\n  }\n\n  // The sort icon is only drawn in the top row\n  const sortIcon =\n    rowIndex === 0 ? drawSortIcon(columnSortDirection) : undefined\n\n  return (\n    // (ESLint erroneously believes we're not assigning a role to our clickable div)\n    // eslint-disable-next-line\n\n    <CellType\n      // @ts-expect-error\n      style={style}\n      onClick={onClick}\n      role={role}\n      tabIndex={tabIndex}\n      title={title}\n      data-testid={CellType.displayName}\n      data-test-sort-direction={columnSortDirection}\n    >\n      {contents}\n      {sortedByUser ? sortIcon : \"\"}\n    </CellType>\n  )\n}\n\nfunction drawSortIcon(sortDirection?: SortDirection): React.ReactNode {\n  // If these icons are changed, you may also need to update DataFrame.SORT_ICON_WIDTH\n  // to ensure proper column width padding\n  switch (sortDirection) {\n    case SortDirection.ASCENDING:\n      return (\n        <StyledSortIcon data-testid=\"sortIcon\">\n          <Icon content={ChevronTop} size=\"xs\" margin=\"0 0 0 twoXS\" />\n        </StyledSortIcon>\n      )\n\n    case SortDirection.DESCENDING:\n      return (\n        <StyledSortIcon data-testid=\"sortIcon\">\n          <Icon content={ChevronBottom} size=\"xs\" margin=\"0 0 0 twoXS\" />\n        </StyledSortIcon>\n      )\n\n    default:\n      return null\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  DataFrameCellType,\n  dataFrameGet,\n  dataFrameGetDimensions,\n} from \"src/lib/dataFrameProto\"\nimport { toFormattedString } from \"src/lib/format\"\nimport { logWarning } from \"src/lib/log\"\nimport { scrollbarSize } from \"src/vendor/dom-helpers\"\nimport React, { ReactElement, ComponentType } from \"react\"\nimport { Map as ImmutableMap } from \"immutable\"\nimport { fontSizes } from \"src/theme/primitives/typography\"\nimport {\n  StyledDataFrameRowHeaderCell,\n  StyledDataFrameDataCell,\n  StyledDataFrameColHeaderCell,\n  StyledDataFrameCornerCell,\n} from \"./styled-components\"\n\n/**\n * Size of the optional sort icon displayed in column headers\n */\nconst SORT_ICON_WIDTH_PX = 10\n\n/**\n * Height of dataframe row.\n */\nexport const ROW_HEIGHT = fontSizes.smPx * 2\n\n/**\n * Minimum size of a dataframe cell.\n */\nexport const MIN_CELL_WIDTH_PX = 25\n\n/**\n * Maximum size of a dataframe cell.\n */\nconst MAX_CELL_WIDTH_PX = 200\n\n/**\n * Maximum size of a dataframe cell in a 1-column dataframe.\n */\nconst MAX_LONELY_CELL_WIDTH_PX = 400\n\nexport interface CellContents {\n  Component: ComponentType\n  styles: Record<string, unknown>\n  contents: string\n}\n\nexport interface CellContentsGetter {\n  (columnIndex: number, rowIndex: number): CellContents\n}\nexport interface CellContentsGetterProps {\n  element: ImmutableMap<string, any>\n  headerRows: number\n  sortedDataRowIndices?: number[]\n}\nexport interface CellRendererInput {\n  columnIndex: number\n  key: string\n  rowIndex: number\n  style: React.CSSProperties\n}\n\nexport interface CellRenderer {\n  (input: CellRendererInput): ReactElement\n}\n\ninterface Dimensions {\n  rowHeight: number\n  headerHeight: number\n  border: number\n  height: number\n  elementWidth: number\n  columnWidth: ({ index }: { index: number }) => number\n  headerWidth: number\n}\n\ninterface ComputedWidths {\n  elementWidth: number\n  columnWidth: ({ index }: { index: number }) => number\n  headerWidth: number\n}\n\nconst DEFAULT_HEIGHT = 300\n\n/**\n * Returns rendering dimensions for a DataFrame\n */\nexport const getDimensions = (\n  height: number | undefined,\n  width: number,\n  element: ImmutableMap<string, any>,\n  cellContentsGetter: CellContentsGetter\n): Dimensions => {\n  const { headerRows, headerCols, dataRows, cols, rows } =\n    dataFrameGetDimensions(element)\n\n  // Rendering constants.\n  const headerHeight = ROW_HEIGHT * headerRows\n  const border = 2\n\n  // Reserve enough space to render the dataframe border as well as a vertical\n  // scrollbar if necessary.\n  const availableWidth = width - border - scrollbarSize()\n  const widths = getWidths(\n    cols,\n    rows,\n    headerCols,\n    headerRows,\n    availableWidth,\n    cellContentsGetter\n  )\n\n  let { elementWidth, columnWidth, headerWidth } = widths\n\n  // Add space for the \"empty\" text when the table is empty.\n  const EMPTY_WIDTH = 60 // px\n  if (dataRows === 0 && elementWidth < EMPTY_WIDTH) {\n    elementWidth = EMPTY_WIDTH\n    headerWidth = EMPTY_WIDTH\n    let totalWidth = 0\n    for (let i = 0; i < cols; i++) {\n      totalWidth += columnWidth({ index: i })\n    }\n    if (totalWidth < EMPTY_WIDTH) {\n      columnWidth = () => EMPTY_WIDTH / cols\n    }\n  }\n\n  // Allocate extra space for horizontal and vertical scrollbars, if needed.\n  const totalHeight = rows * ROW_HEIGHT\n  const maxHeight = (height || DEFAULT_HEIGHT) - border\n\n  height = Math.min(totalHeight, maxHeight)\n\n  const needsVerticalScrollbar = totalHeight > maxHeight\n  elementWidth += needsVerticalScrollbar ? scrollbarSize() : 0\n\n  return {\n    rowHeight: ROW_HEIGHT,\n    headerHeight,\n    border,\n    columnWidth,\n    headerWidth,\n    elementWidth,\n    height,\n  }\n}\n\nconst typeToStyledComponent: Record<DataFrameCellType, ComponentType> = {\n  corner: StyledDataFrameCornerCell,\n  \"col-header\": StyledDataFrameColHeaderCell,\n  \"row-header\": StyledDataFrameRowHeaderCell,\n  data: StyledDataFrameDataCell,\n}\n\n/**\n * Returns a function which can access individual cell data in a DataFrame.\n *\n * The returned function has the form:\n *\n * cellContentsGetter(columnIndex: int, rowIndex: int) -> {\n *    classes: str - a css class string\n *    styles: {property1: value1, ...} - css styles to apply to the cell\n *    contents: str - the cell's formatted display string\n * }\n *\n * element              - a DataFrame\n * headerRows           - the number of frozen rows\n * headerCols           - the number of frozen columns\n * sortedDataRowIndices - (optional) an array containing an ordering for row indices\n */\nexport function getCellContentsGetter({\n  element,\n  headerRows,\n  sortedDataRowIndices,\n}: CellContentsGetterProps): CellContentsGetter {\n  return (columnIndex: number, rowIndex: number): CellContents => {\n    if (sortedDataRowIndices != null && rowIndex >= headerRows) {\n      // If we have a sortedDataRowIndices Array, it contains a mapping of row indices for\n      // all *data* (non-header) rows.\n      const sortIdx = rowIndex - headerRows\n      if (sortIdx >= 0 && sortIdx < sortedDataRowIndices.length) {\n        rowIndex = sortedDataRowIndices[sortIdx]\n        rowIndex += headerRows\n      } else {\n        logWarning(\n          `Bad sortedDataRowIndices (` +\n            `rowIndex=${rowIndex}, ` +\n            `headerRows=${headerRows}, ` +\n            `sortedDataRowIndices.length=${sortedDataRowIndices.length}`\n        )\n      }\n    }\n\n    const { contents, styles, type } = dataFrameGet(\n      element,\n      columnIndex,\n      rowIndex\n    )\n\n    // All table elements have class 'dataframe'.\n    const Component = typeToStyledComponent[type]\n\n    // Format floating point numbers nicely.\n    const fsContents = toFormattedString(contents)\n\n    // Put it all together\n    return { Component, styles, contents: fsContents }\n  }\n}\n\n/**\n * Computes various dimensions for the table.\n *\n * First of all we create an array containing all the calculated column widths,\n * if the difference between the total of columns and the container width is negative\n * we put a width limit, if not, we divide the remaining space by each exceeding width\n */\nexport function getWidths(\n  cols: number,\n  rows: number,\n  headerCols: number,\n  headerRows: number,\n  containerWidth: number,\n  cellContentsGetter: CellContentsGetter\n): ComputedWidths {\n  const minWidth = MIN_CELL_WIDTH_PX\n  const maxWidth =\n    cols > 2 // 2 because 1 column is the index.\n      ? MAX_CELL_WIDTH_PX\n      : MAX_LONELY_CELL_WIDTH_PX\n\n  // Calculate column width based on character count alone.\n  const calculateColumnWidth = ({ index }: { index: number }): number => {\n    const colIndex = index\n    const fontSize = 10\n    const charWidth = (fontSize * 8) / 10\n    const padding = 14 + SORT_ICON_WIDTH_PX // 14 for whitespace; an extra 10 for the optional sort arrow icon\n\n    // Set the colWidth to the maximum width of a column.\n    const maxRows = 100\n    let colWidth = minWidth\n    for (let i = 0; i < Math.min(rows, maxRows); i++) {\n      let rowIndex = -1\n      if (i < headerRows) {\n        // Always measure all the header rows.\n        rowIndex = i\n      } else if (rows > maxRows) {\n        // If there are a lot of rows, then pick some at random.\n        rowIndex = Math.floor(Math.random() * rows)\n      } else {\n        // Otherwise, just measure every row.\n        rowIndex = i\n      }\n      const { contents } = cellContentsGetter(colIndex, rowIndex)\n      const nChars = contents ? contents.length : 0\n      const cellWidth = nChars * charWidth + padding\n\n      if (cellWidth > colWidth) {\n        colWidth = cellWidth\n      }\n    }\n    return colWidth\n  }\n\n  let distributedTable: Array<number> = []\n  const tableColumnWidth: Array<number> = Array.from(Array(cols), (_, index) =>\n    calculateColumnWidth({ index })\n  )\n  const totalTableWidth = tableColumnWidth.reduce((a, b) => a + b, 0)\n  const remainingSpace = containerWidth - totalTableWidth\n  const getColumnsThatExceedMaxWidth = (\n    columns: Array<number>\n  ): Array<number> => columns.filter(width => width > maxWidth)\n\n  if (remainingSpace < 0) {\n    distributedTable = tableColumnWidth.map(width =>\n      width > maxWidth ? maxWidth : width\n    )\n  } else {\n    const columnsThatExceed = getColumnsThatExceedMaxWidth(tableColumnWidth)\n    const remainingSpaceByColumn = remainingSpace / columnsThatExceed.length\n\n    distributedTable = tableColumnWidth.map((width, id) => {\n      if (id in columnsThatExceed.keys()) {\n        return width + remainingSpaceByColumn\n      }\n\n      return width\n    })\n  }\n\n  let distributedTableTotal = distributedTable.reduce((a, b) => a + b, 0)\n  if (\n    distributedTableTotal > containerWidth * (2 / 3) &&\n    distributedTableTotal < containerWidth\n  ) {\n    const remainingSpace = (containerWidth - distributedTableTotal) / cols\n    distributedTable = distributedTable.map(width => width + remainingSpace)\n    distributedTableTotal = distributedTable.reduce((a, b) => a + b, 0)\n  }\n\n  const elementWidth = Math.min(distributedTableTotal, containerWidth)\n  const columnWidth = ({ index }: { index: number }): number =>\n    distributedTable[index]\n\n  const headerWidth = distributedTable\n    .slice(0, headerCols)\n    .reduce((prev, curr) => prev + curr)\n\n  return {\n    elementWidth,\n    columnWidth,\n    headerWidth,\n  }\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport enum SortDirection {\n  ASCENDING = \"ascending\",\n  DESCENDING = \"descending\",\n}\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default } from \"./DataFrame\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled, { CSSObject } from \"@emotion/styled\"\nimport { Theme } from \"src/theme\"\n\nexport interface StyledDataFrameContainerProps {\n  width: number\n}\n\nexport const StyledDataFrameContainer =\n  styled.div<StyledDataFrameContainerProps>(({ width, theme }) => ({\n    width,\n    border: `1px solid ${theme.colors.fadedText05}`,\n    boxSizing: \"content-box\",\n\n    \"& .table-top-right\": {\n      // Hide scrollbar manually rather than with the hideTopRightGridScrollbar property of React\n      // Multigrid because the latter does show a scrollbar in some cases, for some reason.\n      overflow: \"hidden !important\",\n      paddingRight: \"6px\", // Scrollbar size\n    },\n\n    \"& .table-bottom-left\": {\n      // Hide scrollbar manually rather than with the hideTopRightGridScrollbar property of React\n      // Multigrid because the latter does show a scrollbar in some cases, for some reason.\n      overflow: \"hidden !important\",\n      paddingBottom: \"6px\", // Scrollbar size\n    },\n\n    // Only this area should ever show a scrollbar.\n    \"& .table-bottom-right\": {\n      // Like all our scrollbar mods (see globalStyles.ts) this only works in Webkit and Blink.\n      overflow: \"overlay !important\",\n    },\n\n    // Remove visible outline from click, since there's no click target/action anyway.\n    \"& .table-bottom-right:focus-visible\": {\n      outline: \"none\",\n    },\n    \"& .table-bottom-right:focus\": {\n      outline: \"none\",\n    },\n  }))\n\nconst StyledDataFrameCell = styled.div(({ theme }) => ({\n  padding: `${theme.spacing.twoXS} ${theme.spacing.xs}`,\n  borderBottom: `1px solid ${theme.colors.fadedText05}`,\n  borderRight: `1px solid ${theme.colors.fadedText05}`,\n  fontSize: theme.fontSizes.md,\n  fontFamily: theme.fonts.sansSerif,\n  lineHeight: theme.lineHeights.table,\n  display: \"flex\",\n  alignItems: \"center\",\n  justifyContent: \"flex-start\",\n}))\n\nconst headerCellFormatter = (theme: Theme): CSSObject => ({\n  color: theme.colors.fadedText60,\n  borderBottom: `1px solid ${theme.colors.fadedText05}`,\n  borderRight: `1px solid ${theme.colors.fadedText05}`,\n  zIndex: 1,\n})\n\nconst cellTextFormatter = (theme: Theme): CSSObject => ({\n  overflow: \"hidden\",\n  whiteSpace: \"nowrap\",\n  textOverflow: \"ellipsis\",\n  lineHeight: theme.lineHeights.table,\n})\n\nexport const StyledDataFrameCornerCell = styled(StyledDataFrameCell)(\n  ({ theme }) => headerCellFormatter(theme)\n)\n\nexport const StyledDataFrameColHeaderCell = styled(StyledDataFrameCell)(\n  ({ theme }) => ({\n    /* Row headers are click-to-sort, so we make the text unselectable.\n     Column headers are also unselectable, so that clicking to sort the\n     column's row header doesn't result in the entire column being selected */\n    userSelect: \"none\",\n    ...headerCellFormatter(theme),\n    ...cellTextFormatter(theme),\n  })\n)\n\nexport const StyledDataFrameRowHeaderCell = styled(StyledDataFrameCell)(\n  ({ theme }) => ({\n    /* Row headers are click-to-sort, so we make the text unselectable.\n     Column headers are also unselectable, so that clicking to sort the\n     column's row header doesn't result in the entire column being selected */\n    userSelect: \"none\",\n    ...headerCellFormatter(theme),\n    ...cellTextFormatter(theme),\n  })\n)\n\nexport const StyledDataFrameDataCell = styled(StyledDataFrameCell)(\n  ({ theme }) => cellTextFormatter(theme)\n)\n\nexport interface StyledFixupProps {\n  verticalLocator: \"top\" | \"bottom\"\n  horizontalLocator: \"left\" | \"right\"\n  width: number\n  height: number\n}\n\nexport const StyledFixup = styled.div<StyledFixupProps>(\n  ({ verticalLocator, horizontalLocator, width, height }) => ({\n    position: \"absolute\",\n    [verticalLocator]: \"0px\",\n    [horizontalLocator]: \"0px\",\n    width,\n    height,\n  })\n)\n\nexport const StyledEmptyDataframe = styled.div(({ theme }) => ({\n  fontFamily: theme.fonts.monospace,\n  color: theme.colors.fadedText60,\n  fontStyle: \"italic\",\n  fontSize: theme.fontSizes.md,\n  textAlign: \"center\",\n}))\n\nexport const StyledSortIcon = styled.span(({ theme }) => ({\n  color: theme.colors.fadedText05,\n  verticalAlign: \"top\",\n}))\n","/* eslint-disable */\n\n// We only need a single function from https://github.com/react-bootstrap/dom-helpers,\n// so we copy it here instead of adding a new dependency.\n\nconst canUseDOM = !!(\n  typeof window !== \"undefined\" &&\n  window.document &&\n  window.document.createElement\n)\n\nlet size: number\n\n// https://github.com/react-bootstrap/dom-helpers/blob/3f509a03c5e330faa93bcf8acf30976b5a7bacac/src/scrollbarSize.ts#L5\nexport function scrollbarSize(recalc?: boolean) {\n  if ((!size && size !== 0) || recalc) {\n    if (canUseDOM) {\n      const scrollDiv = document.createElement(\"div\")\n\n      scrollDiv.style.position = \"absolute\"\n      scrollDiv.style.top = \"-9999px\"\n      scrollDiv.style.width = \"50px\"\n      scrollDiv.style.height = \"50px\"\n      scrollDiv.style.overflow = \"scroll\"\n\n      document.body.appendChild(scrollDiv)\n      size = scrollDiv.offsetWidth - scrollDiv.clientWidth\n      document.body.removeChild(scrollDiv)\n    }\n  }\n\n  return size\n}\n","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var ChevronBottom = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M1.5 1L0 2.5l4 4 4-4L6.5 1 4 3.5 1.5 1z\"\n  }));\n});\nChevronBottom.displayName = 'ChevronBottom';\nexport var ChevronBottomDimensions = {\n  height: 8,\n  width: 8\n};","import _extends from \"@babel/runtime/helpers/extends\";\nimport * as React from 'react';\nimport { EmotionIconBase } from '@emotion-icons/emotion-icon';\nexport var ChevronTop = /*#__PURE__*/React.forwardRef(function (props, ref) {\n  var attrs = {\n    \"fill\": \"currentColor\",\n    \"xmlns\": \"http://www.w3.org/2000/svg\"\n  };\n  return /*#__PURE__*/React.createElement(EmotionIconBase, _extends({\n    iconAttrs: attrs,\n    iconVerticalAlign: \"middle\",\n    iconViewBox: \"0 0 8 8\"\n  }, props, {\n    ref: ref\n  }), /*#__PURE__*/React.createElement(\"path\", {\n    d: \"M4 1L0 5l1.5 1.5L4 4l2.5 2.5L8 5 4 1z\"\n  }));\n});\nChevronTop.displayName = 'ChevronTop';\nexport var ChevronTopDimensions = {\n  height: 8,\n  width: 8\n};"],"names":[],"sourceRoot":""}