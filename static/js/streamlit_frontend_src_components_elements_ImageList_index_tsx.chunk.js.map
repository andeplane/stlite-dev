{"version":3,"file":"static/js/streamlit_frontend_src_components_elements_ImageList_index_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AAOA;AACA;AAGA;AAIA;AAAA;AAgBA;AACA;AACA;AAFA;AANA;AAAA;AAAA;AAAA;AASA;AAMA;AAAA;AALA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AAAA;AAEA;AACA;AAGA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAIA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAfA;AAAA;AAAA;AAAA;AAkBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAtEA;AAOA;AAAA;AAiEA;AAAA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AC5HA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;AC1CA","sources":["/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/ImageList/ImageList.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/ImageList/index.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/elements/ImageList/styled-components.ts","/home/runner/work/stlite-dev/stlite-dev/packages/mountable/ignored|/home/runner/work/stlite-dev/stlite-dev/node_modules/htmlparser2/lib|readable-stream"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React, { ReactElement } from \"react\"\nimport ReactHtmlParser from \"react-html-parser\"\nimport { useStliteImageList } from \"@stlite/kernel\"\n\nimport {\n  IImage,\n  Image as ImageProto,\n  ImageList as ImageListProto,\n} from \"src/autogen/proto\"\nimport withFullScreenWrapper from \"src/hocs/withFullScreenWrapper\"\nimport { xssSanitizeSvg } from \"src/lib/UriUtil\"\nimport { StreamlitEndpoints } from \"src/lib/StreamlitEndpoints\"\n\nimport {\n  StyledCaption,\n  StyledImageContainer,\n  StyledImageList,\n} from \"./styled-components\"\n\nexport interface ImageListProps {\n  endpoints: StreamlitEndpoints\n  width: number\n  isFullScreen: boolean\n  element: ImageListProto\n  height?: number\n}\n\nenum WidthBehavior {\n  OriginalWidth = -1,\n  ColumnWidth = -2,\n  AutoWidth = -3,\n}\n\n/**\n * Functional element for a horizontal list of images.\n */\nexport function ImageList({\n  width,\n  isFullScreen,\n  element,\n  height,\n  endpoints,\n}: ImageListProps): ReactElement {\n  const images = useStliteImageList(element.imgs)\n\n  // The width field in the proto sets the image width, but has special\n  // cases for -1, -2, and -3.\n  let containerWidth: number | undefined\n  const protoWidth = element.width\n\n  if (\n    protoWidth === WidthBehavior.OriginalWidth ||\n    protoWidth === WidthBehavior.AutoWidth\n  ) {\n    // Use the original image width.\n    containerWidth = undefined\n  } else if (protoWidth === WidthBehavior.ColumnWidth) {\n    // Use the column width\n    containerWidth = width\n  } else if (protoWidth > 0) {\n    // Set the image width explicitly.\n    containerWidth = protoWidth\n  } else {\n    throw Error(`Invalid image width: ${protoWidth}`)\n  }\n\n  const imgStyle: any = {}\n\n  if (height && isFullScreen) {\n    imgStyle.maxHeight = height\n    imgStyle[\"object-fit\"] = \"contain\"\n  } else {\n    imgStyle.width = containerWidth\n\n    if (protoWidth === WidthBehavior.AutoWidth) {\n      // Cap the image width, so it doesn't exceed the column width\n      imgStyle.maxWidth = \"100%\"\n    }\n  }\n\n  return (\n    <StyledImageList style={{ width }}>\n      {images.map((iimage: IImage, idx: number): ReactElement => {\n        const image = iimage as ImageProto\n        return (\n          <StyledImageContainer key={idx} data-testid=\"stImage\">\n            {image.markup ? (\n              // SVGs are received unsanitized\n              ReactHtmlParser(xssSanitizeSvg(image.markup))\n            ) : (\n              <img\n                style={imgStyle}\n                src={endpoints.buildMediaURL(image.url)}\n                alt={idx.toString()}\n              />\n            )}\n            {image.caption && (\n              <StyledCaption data-testid=\"caption\" style={imgStyle}>\n                {` ${image.caption} `}\n              </StyledCaption>\n            )}\n          </StyledImageContainer>\n        )\n      })}\n    </StyledImageList>\n  )\n}\n\nexport default withFullScreenWrapper(ImageList)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default } from \"./ImageList\"\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport styled from \"@emotion/styled\"\n\nexport const StyledImageList = styled.div(({ theme }) => ({\n  display: \"flex\",\n  flexDirection: \"row\",\n  flexWrap: \"wrap\",\n  // Not supported in Safari, but at least it's not a regression for those users:\n  rowGap: theme.spacing.lg,\n}))\n\nexport const StyledImageContainer = styled.div(() => ({\n  display: \"flex\",\n  flexDirection: \"column\",\n  alignItems: \"stretch\",\n  width: \"auto\",\n  flexGrow: 0,\n}))\n\nexport const StyledCaption = styled.div(({ theme }) => ({\n  fontFamily: theme.genericFonts.bodyFont,\n  fontSize: theme.fontSizes.sm,\n  color: theme.colors.fadedText60,\n  textAlign: \"center\",\n  marginTop: theme.spacing.xs,\n  wordWrap: \"break-word\",\n  padding: \"0.125rem\",\n}))\n","/* (ignored) */"],"names":[],"sourceRoot":""}