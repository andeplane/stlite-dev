{"version":3,"file":"static/js/streamlit_frontend_src_components_widgets_DateInput_index_tsx.chunk.js","mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAKA;AACA;AAEA;AAAA;AAuBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AACA;AAGA;AACA;AACA;AACA;AAAA;AAmDA;AAKA;AAAA;AAOA;AACA;AAAA;AAAA;AACA;AAAA;AAEA;AAAA;AAMA;AAHA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AAAA;AAGA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;AACA;AAAA;AAGA;AAAA;AAAA;AACA;AAEA;AAGA;AAAA;AA9HA;AACA;AACA;AACA;AAGA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAAA;AAAA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AAEA;;AAEA;;AAiFA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AACA;AACA;;AAEA;AACA;AAMA;AACA;AAAA;AAAA;AAEA;AACA;AACA;AAEA;AAGA;AAEA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AACA;AAEA;AAAA;AAAA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;ACjWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA","sources":["/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/DateInput/DateInput.tsx","/home/runner/work/stlite-dev/stlite-dev/streamlit/frontend/src/components/widgets/DateInput/index.tsx"],"sourcesContent":["/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport React from \"react\"\nimport moment from \"moment\"\nimport { withTheme } from \"@emotion/react\"\nimport { Datepicker as UIDatePicker, DENSITY } from \"baseui/datepicker\"\nimport { PLACEMENT } from \"baseui/popover\"\nimport { DateInput as DateInputProto } from \"src/autogen/proto\"\nimport { FormClearHelper } from \"src/components/widgets/Form\"\nimport { WidgetStateManager, Source } from \"src/lib/WidgetStateManager\"\nimport {\n  WidgetLabel,\n  StyledWidgetLabelHelp,\n} from \"src/components/widgets/BaseWidget\"\nimport { Theme } from \"src/theme\"\nimport TooltipIcon from \"src/components/shared/TooltipIcon\"\nimport { Placement } from \"src/components/shared/Tooltip\"\n\nimport { labelVisibilityProtoValueToEnum } from \"src/lib/utils\"\n\nexport interface Props {\n  disabled: boolean\n  element: DateInputProto\n  theme: Theme\n  widgetMgr: WidgetStateManager\n  width: number\n}\n\ninterface State {\n  /**\n   * An array with start and end date specified by the user via the UI. If the user\n   * didn't touch this widget's UI, the default value is used. End date is optional.\n   */\n  values: Date[]\n  /**\n   * Boolean to toggle between single-date picker and range date picker.\n   */\n  isRange: boolean\n  isEmpty: boolean\n}\n\n// Date format for communication (protobuf) support\nconst DATE_FORMAT = \"YYYY/MM/DD\"\n\n/** Convert an array of strings to an array of dates. */\nfunction stringsToDates(strings: string[]): Date[] {\n  return strings.map(val => new Date(val))\n}\n\n/** Convert an array of dates to an array of strings. */\nfunction datesToStrings(dates: Date[]): string[] {\n  return dates.map((value: Date) => moment(value as Date).format(DATE_FORMAT))\n}\n\nclass DateInput extends React.PureComponent<Props, State> {\n  private readonly formClearHelper = new FormClearHelper()\n\n  public state: State = {\n    values: this.initialValue,\n    isRange: this.props.element.isRange,\n    isEmpty: false,\n  }\n\n  get initialValue(): Date[] {\n    // If WidgetStateManager knew a value for this widget, initialize to that.\n    // Otherwise, use the default value from the widget protobuf.\n    const storedValue = this.props.widgetMgr.getStringArrayValue(\n      this.props.element\n    )\n    const stringArray =\n      storedValue !== undefined ? storedValue : this.props.element.default\n    return stringsToDates(stringArray)\n  }\n\n  public componentDidMount(): void {\n    if (this.props.element.setValue) {\n      this.updateFromProtobuf()\n    } else {\n      this.commitWidgetValue({ fromUi: false })\n    }\n  }\n\n  public componentDidUpdate(): void {\n    this.maybeUpdateFromProtobuf()\n  }\n\n  public componentWillUnmount(): void {\n    this.formClearHelper.disconnect()\n  }\n\n  private maybeUpdateFromProtobuf(): void {\n    const { setValue } = this.props.element\n    if (setValue) {\n      this.updateFromProtobuf()\n    }\n  }\n\n  private updateFromProtobuf(): void {\n    const { value: values } = this.props.element\n    this.props.element.setValue = false\n    this.setState(\n      {\n        values: values.map((v: string) => new Date(v)),\n      },\n      () => {\n        this.commitWidgetValue({ fromUi: false })\n      }\n    )\n  }\n\n  /** Commit state.value to the WidgetStateManager. */\n  private commitWidgetValue = (source: Source): void => {\n    this.props.widgetMgr.setStringArrayValue(\n      this.props.element,\n      datesToStrings(this.state.values),\n      source\n    )\n  }\n\n  /**\n   * If we're part of a clear_on_submit form, this will be called when our\n   * form is submitted. Restore our default value and update the WidgetManager.\n   */\n  private onFormCleared = (): void => {\n    const defaultValue = stringsToDates(this.props.element.default)\n    this.setState({ values: defaultValue }, () =>\n      this.commitWidgetValue({ fromUi: true })\n    )\n  }\n\n  private handleChange = ({\n    date,\n  }: {\n    date: Date | (Date | null | undefined)[] | null | undefined\n  }): void => {\n    if (date === null || date === undefined) {\n      this.setState({\n        values: [],\n        isEmpty: true,\n      })\n      return\n    }\n\n    const values: Date[] = []\n    if (Array.isArray(date)) {\n      date.forEach((dt: Date | null | undefined) => {\n        if (dt) {\n          values.push(dt)\n        }\n      })\n    } else {\n      values.push(date)\n    }\n\n    this.setState(\n      {\n        values,\n        isEmpty: !values,\n      },\n      () => {\n        if (!this.state.isEmpty) this.commitWidgetValue({ fromUi: true })\n      }\n    )\n  }\n\n  private handleClose = (): void => {\n    const { isEmpty } = this.state\n    if (isEmpty) {\n      this.setState(\n        (_, prevProps) => {\n          return {\n            values: stringsToDates(prevProps.element.default),\n            isEmpty: !stringsToDates(prevProps.element.default),\n          }\n        },\n        () => {\n          this.commitWidgetValue({ fromUi: true })\n        }\n      )\n    }\n  }\n\n  private getMaxDate = (): Date | undefined => {\n    const { element } = this.props\n    const maxDate = element.max\n\n    return maxDate && maxDate.length > 0\n      ? moment(maxDate, DATE_FORMAT).toDate()\n      : undefined\n  }\n\n  public render(): React.ReactNode {\n    const { width, element, disabled, theme, widgetMgr } = this.props\n    const { values, isRange } = this.state\n    const { colors, fontSizes, lineHeights } = theme\n\n    const style = { width }\n    const minDate = moment(element.min, DATE_FORMAT).toDate()\n    const maxDate = this.getMaxDate()\n\n    // Manage our form-clear event handler.\n    this.formClearHelper.manageFormClearListener(\n      widgetMgr,\n      element.formId,\n      this.onFormCleared\n    )\n\n    return (\n      <div className=\"stDateInput\" style={style}>\n        <WidgetLabel\n          label={element.label}\n          disabled={disabled}\n          labelVisibility={labelVisibilityProtoValueToEnum(\n            element.labelVisibility?.value\n          )}\n        >\n          {element.help && (\n            <StyledWidgetLabelHelp>\n              <TooltipIcon\n                content={element.help}\n                placement={Placement.TOP_RIGHT}\n              />\n            </StyledWidgetLabelHelp>\n          )}\n        </WidgetLabel>\n        <UIDatePicker\n          density={DENSITY.high}\n          formatString=\"yyyy/MM/dd\"\n          disabled={disabled}\n          onChange={this.handleChange}\n          onClose={this.handleClose}\n          overrides={{\n            Popover: {\n              props: {\n                placement: PLACEMENT.bottomLeft,\n                overrides: {\n                  Body: {\n                    style: {\n                      border: `1px solid ${colors.fadedText10}`,\n                    },\n                  },\n                },\n              },\n            },\n            CalendarContainer: {\n              style: {\n                fontSize: fontSizes.sm,\n                paddingRight: theme.spacing.sm,\n                paddingLeft: theme.spacing.sm,\n                paddingBottom: theme.spacing.sm,\n                paddingTop: theme.spacing.sm,\n              },\n            },\n            Week: {\n              style: {\n                fontSize: fontSizes.sm,\n              },\n            },\n            Day: {\n              style: {\n                fontSize: fontSizes.sm,\n                lineHeight: lineHeights.base,\n                \"::after\": {\n                  borderColor: colors.transparent,\n                },\n              },\n            },\n            PrevButton: {\n              style: () => ({\n                // Align icon to the center of the button.\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                // Remove primary-color click effect.\n                \":active\": {\n                  backgroundColor: colors.transparent,\n                },\n                \":focus\": {\n                  backgroundColor: colors.transparent,\n                  outline: 0,\n                },\n              }),\n            },\n            NextButton: {\n              style: {\n                // Align icon to the center of the button.\n                display: \"flex\",\n                alignItems: \"center\",\n                justifyContent: \"center\",\n                // Remove primary-color click effect.\n                \":active\": {\n                  backgroundColor: colors.transparent,\n                },\n                \":focus\": {\n                  backgroundColor: colors.transparent,\n                  outline: 0,\n                },\n              },\n            },\n            Input: {\n              props: {\n                // The default maskChar ` ` causes empty dates to display as ` / / `\n                // Clearing the maskChar so empty dates will not display\n                maskChar: null,\n\n                overrides: {\n                  Root: {\n                    style: {\n                      // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                      borderLeftWidth: \"1px\",\n                      borderRightWidth: \"1px\",\n                      borderTopWidth: \"1px\",\n                      borderBottomWidth: \"1px\",\n                    },\n                  },\n\n                  Input: {\n                    style: {\n                      // Baseweb requires long-hand props, short-hand leads to weird bugs & warnings.\n                      paddingRight: \".5rem\",\n                      paddingLeft: \".5rem\",\n                      paddingBottom: \".5rem\",\n                      paddingTop: \".5rem\",\n                    },\n                  },\n                },\n              },\n            },\n          }}\n          value={values}\n          minDate={minDate}\n          maxDate={maxDate}\n          range={isRange}\n        />\n      </div>\n    )\n  }\n}\n\nexport default withTheme(DateInput)\n","/**\n * Copyright (c) Streamlit Inc. (2018-2022) Snowflake Inc. (2022)\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport { default } from \"./DateInput\"\n"],"names":[],"sourceRoot":""}